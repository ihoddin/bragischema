// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: proto/bragi/bragi.proto

package bragi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CsgoPlayerRole int32

const (
	CsgoPlayerRole_CSGO_PLAYER_ROLE_UNSPECIFIED   CsgoPlayerRole = 0
	CsgoPlayerRole_CSGO_PLAYER_ROLE_KILL_LEADER   CsgoPlayerRole = 1
	CsgoPlayerRole_CSGO_PLAYER_ROLE_ENTRY_FRAGGER CsgoPlayerRole = 2
	CsgoPlayerRole_CSGO_PLAYER_ROLE_SUPPORT       CsgoPlayerRole = 3
	CsgoPlayerRole_CSGO_PLAYER_ROLE_AWPER         CsgoPlayerRole = 4
	CsgoPlayerRole_CSGO_PLAYER_ROLE_LURKER        CsgoPlayerRole = 5
)

// Enum value maps for CsgoPlayerRole.
var (
	CsgoPlayerRole_name = map[int32]string{
		0: "CSGO_PLAYER_ROLE_UNSPECIFIED",
		1: "CSGO_PLAYER_ROLE_KILL_LEADER",
		2: "CSGO_PLAYER_ROLE_ENTRY_FRAGGER",
		3: "CSGO_PLAYER_ROLE_SUPPORT",
		4: "CSGO_PLAYER_ROLE_AWPER",
		5: "CSGO_PLAYER_ROLE_LURKER",
	}
	CsgoPlayerRole_value = map[string]int32{
		"CSGO_PLAYER_ROLE_UNSPECIFIED":   0,
		"CSGO_PLAYER_ROLE_KILL_LEADER":   1,
		"CSGO_PLAYER_ROLE_ENTRY_FRAGGER": 2,
		"CSGO_PLAYER_ROLE_SUPPORT":       3,
		"CSGO_PLAYER_ROLE_AWPER":         4,
		"CSGO_PLAYER_ROLE_LURKER":        5,
	}
)

func (x CsgoPlayerRole) Enum() *CsgoPlayerRole {
	p := new(CsgoPlayerRole)
	*p = x
	return p
}

func (x CsgoPlayerRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CsgoPlayerRole) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_bragi_bragi_proto_enumTypes[0].Descriptor()
}

func (CsgoPlayerRole) Type() protoreflect.EnumType {
	return &file_proto_bragi_bragi_proto_enumTypes[0]
}

func (x CsgoPlayerRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CsgoPlayerRole.Descriptor instead.
func (CsgoPlayerRole) EnumDescriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{0}
}

type CsgoSide int32

const (
	CsgoSide_CSGO_SIDE_UNSPECIFIED        CsgoSide = 0
	CsgoSide_CSGO_SIDE_COUNTER_TERRORISTS CsgoSide = 1
	CsgoSide_CSGO_SIDE_TERRORISTS         CsgoSide = 2
)

// Enum value maps for CsgoSide.
var (
	CsgoSide_name = map[int32]string{
		0: "CSGO_SIDE_UNSPECIFIED",
		1: "CSGO_SIDE_COUNTER_TERRORISTS",
		2: "CSGO_SIDE_TERRORISTS",
	}
	CsgoSide_value = map[string]int32{
		"CSGO_SIDE_UNSPECIFIED":        0,
		"CSGO_SIDE_COUNTER_TERRORISTS": 1,
		"CSGO_SIDE_TERRORISTS":         2,
	}
)

func (x CsgoSide) Enum() *CsgoSide {
	p := new(CsgoSide)
	*p = x
	return p
}

func (x CsgoSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CsgoSide) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_bragi_bragi_proto_enumTypes[1].Descriptor()
}

func (CsgoSide) Type() protoreflect.EnumType {
	return &file_proto_bragi_bragi_proto_enumTypes[1]
}

func (x CsgoSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CsgoSide.Descriptor instead.
func (CsgoSide) EnumDescriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{1}
}

type CsgoRoundOutcome int32

const (
	CsgoRoundOutcome_CSGO_ROUND_OUTCOME_UNSPECIFIED                   CsgoRoundOutcome = 0
	CsgoRoundOutcome_CSGO_ROUND_OUTCOME_COUNTER_TERRORISTS_ELIMINATED CsgoRoundOutcome = 1
	CsgoRoundOutcome_CSGO_ROUND_OUTCOME_TERRORISTS_ELIMINATED         CsgoRoundOutcome = 2
	CsgoRoundOutcome_CSGO_ROUND_OUTCOME_EXPLOSION                     CsgoRoundOutcome = 3
	CsgoRoundOutcome_CSGO_ROUND_OUTCOME_DEFUSE                        CsgoRoundOutcome = 4
	CsgoRoundOutcome_CSGO_ROUND_OUTCOME_TIMEOUT                       CsgoRoundOutcome = 5
)

// Enum value maps for CsgoRoundOutcome.
var (
	CsgoRoundOutcome_name = map[int32]string{
		0: "CSGO_ROUND_OUTCOME_UNSPECIFIED",
		1: "CSGO_ROUND_OUTCOME_COUNTER_TERRORISTS_ELIMINATED",
		2: "CSGO_ROUND_OUTCOME_TERRORISTS_ELIMINATED",
		3: "CSGO_ROUND_OUTCOME_EXPLOSION",
		4: "CSGO_ROUND_OUTCOME_DEFUSE",
		5: "CSGO_ROUND_OUTCOME_TIMEOUT",
	}
	CsgoRoundOutcome_value = map[string]int32{
		"CSGO_ROUND_OUTCOME_UNSPECIFIED":                   0,
		"CSGO_ROUND_OUTCOME_COUNTER_TERRORISTS_ELIMINATED": 1,
		"CSGO_ROUND_OUTCOME_TERRORISTS_ELIMINATED":         2,
		"CSGO_ROUND_OUTCOME_EXPLOSION":                     3,
		"CSGO_ROUND_OUTCOME_DEFUSE":                        4,
		"CSGO_ROUND_OUTCOME_TIMEOUT":                       5,
	}
)

func (x CsgoRoundOutcome) Enum() *CsgoRoundOutcome {
	p := new(CsgoRoundOutcome)
	*p = x
	return p
}

func (x CsgoRoundOutcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CsgoRoundOutcome) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_bragi_bragi_proto_enumTypes[2].Descriptor()
}

func (CsgoRoundOutcome) Type() protoreflect.EnumType {
	return &file_proto_bragi_bragi_proto_enumTypes[2]
}

func (x CsgoRoundOutcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CsgoRoundOutcome.Descriptor instead.
func (CsgoRoundOutcome) EnumDescriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{2}
}

type Timeframe int32

const (
	Timeframe_TIMEFRAME_UNSPECIFIED  Timeframe = 0
	Timeframe_TIMEFRAME_ONE_MONTH    Timeframe = 1
	Timeframe_TIMEFRAME_THREE_MONTHS Timeframe = 2
	Timeframe_TIMEFRAME_SIX_MONTHS   Timeframe = 3
	Timeframe_TIMEFRAME_ONE_YEAR     Timeframe = 4
)

// Enum value maps for Timeframe.
var (
	Timeframe_name = map[int32]string{
		0: "TIMEFRAME_UNSPECIFIED",
		1: "TIMEFRAME_ONE_MONTH",
		2: "TIMEFRAME_THREE_MONTHS",
		3: "TIMEFRAME_SIX_MONTHS",
		4: "TIMEFRAME_ONE_YEAR",
	}
	Timeframe_value = map[string]int32{
		"TIMEFRAME_UNSPECIFIED":  0,
		"TIMEFRAME_ONE_MONTH":    1,
		"TIMEFRAME_THREE_MONTHS": 2,
		"TIMEFRAME_SIX_MONTHS":   3,
		"TIMEFRAME_ONE_YEAR":     4,
	}
)

func (x Timeframe) Enum() *Timeframe {
	p := new(Timeframe)
	*p = x
	return p
}

func (x Timeframe) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Timeframe) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_bragi_bragi_proto_enumTypes[3].Descriptor()
}

func (Timeframe) Type() protoreflect.EnumType {
	return &file_proto_bragi_bragi_proto_enumTypes[3]
}

func (x Timeframe) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Timeframe.Descriptor instead.
func (Timeframe) EnumDescriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{3}
}

type BestOfType int32

const (
	BestOfType_BEST_OF_TYPE_UNSPECIFIED BestOfType = 0
	BestOfType_BEST_OF_TYPE_BO1         BestOfType = 1
	BestOfType_BEST_OF_TYPE_BO2         BestOfType = 2
	BestOfType_BEST_OF_TYPE_BO3         BestOfType = 3
	BestOfType_BEST_OF_TYPE_BO4         BestOfType = 4
	BestOfType_BEST_OF_TYPE_BO5         BestOfType = 5
	BestOfType_BEST_OF_TYPE_BO6         BestOfType = 6
	BestOfType_BEST_OF_TYPE_BO7         BestOfType = 7
)

// Enum value maps for BestOfType.
var (
	BestOfType_name = map[int32]string{
		0: "BEST_OF_TYPE_UNSPECIFIED",
		1: "BEST_OF_TYPE_BO1",
		2: "BEST_OF_TYPE_BO2",
		3: "BEST_OF_TYPE_BO3",
		4: "BEST_OF_TYPE_BO4",
		5: "BEST_OF_TYPE_BO5",
		6: "BEST_OF_TYPE_BO6",
		7: "BEST_OF_TYPE_BO7",
	}
	BestOfType_value = map[string]int32{
		"BEST_OF_TYPE_UNSPECIFIED": 0,
		"BEST_OF_TYPE_BO1":         1,
		"BEST_OF_TYPE_BO2":         2,
		"BEST_OF_TYPE_BO3":         3,
		"BEST_OF_TYPE_BO4":         4,
		"BEST_OF_TYPE_BO5":         5,
		"BEST_OF_TYPE_BO6":         6,
		"BEST_OF_TYPE_BO7":         7,
	}
)

func (x BestOfType) Enum() *BestOfType {
	p := new(BestOfType)
	*p = x
	return p
}

func (x BestOfType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BestOfType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_bragi_bragi_proto_enumTypes[4].Descriptor()
}

func (BestOfType) Type() protoreflect.EnumType {
	return &file_proto_bragi_bragi_proto_enumTypes[4]
}

func (x BestOfType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BestOfType.Descriptor instead.
func (BestOfType) EnumDescriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{4}
}

// The request message containing the user's name.
type SportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SportsRequest) Reset() {
	*x = SportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SportsRequest) ProtoMessage() {}

func (x *SportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SportsRequest.ProtoReflect.Descriptor instead.
func (*SportsRequest) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{0}
}

type TeamHistoricalStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SportId uint32 `protobuf:"varint,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	//  # Timeframe represents interval of computed statistics since current date. Eg. when current date is
	//  # 2021/08/31 and "timeframe" is THREE_MONTHS, then statistics interval would be 2021/06/01 - 2021/08/31.
	Timeframe Timeframe `protobuf:"varint,2,opt,name=timeframe,proto3,enum=bragi.Timeframe" json:"timeframe,omitempty"`
	TeamId    uint32    `protobuf:"varint,3,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *TeamHistoricalStatisticsRequest) Reset() {
	*x = TeamHistoricalStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamHistoricalStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamHistoricalStatisticsRequest) ProtoMessage() {}

func (x *TeamHistoricalStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamHistoricalStatisticsRequest.ProtoReflect.Descriptor instead.
func (*TeamHistoricalStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{1}
}

func (x *TeamHistoricalStatisticsRequest) GetSportId() uint32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *TeamHistoricalStatisticsRequest) GetTimeframe() Timeframe {
	if x != nil {
		return x.Timeframe
	}
	return Timeframe_TIMEFRAME_UNSPECIFIED
}

func (x *TeamHistoricalStatisticsRequest) GetTeamId() uint32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

type LastFiveEncountersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SportId    uint32    `protobuf:"varint,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	Timeframe  Timeframe `protobuf:"varint,2,opt,name=timeframe,proto3,enum=bragi.Timeframe" json:"timeframe,omitempty"`
	HomeTeamId uint32    `protobuf:"varint,3,opt,name=home_team_id,json=homeTeamId,proto3" json:"home_team_id,omitempty"`
	AwayTeamId uint32    `protobuf:"varint,4,opt,name=away_team_id,json=awayTeamId,proto3" json:"away_team_id,omitempty"`
}

func (x *LastFiveEncountersRequest) Reset() {
	*x = LastFiveEncountersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastFiveEncountersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastFiveEncountersRequest) ProtoMessage() {}

func (x *LastFiveEncountersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastFiveEncountersRequest.ProtoReflect.Descriptor instead.
func (*LastFiveEncountersRequest) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{2}
}

func (x *LastFiveEncountersRequest) GetSportId() uint32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *LastFiveEncountersRequest) GetTimeframe() Timeframe {
	if x != nil {
		return x.Timeframe
	}
	return Timeframe_TIMEFRAME_UNSPECIFIED
}

func (x *LastFiveEncountersRequest) GetHomeTeamId() uint32 {
	if x != nil {
		return x.HomeTeamId
	}
	return 0
}

func (x *LastFiveEncountersRequest) GetAwayTeamId() uint32 {
	if x != nil {
		return x.AwayTeamId
	}
	return 0
}

type TournamentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SportId  uint32                 `protobuf:"varint,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	DateFrom *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date_from,json=dateFrom,proto3,oneof" json:"date_from,omitempty"`
	DateTo   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=date_to,json=dateTo,proto3,oneof" json:"date_to,omitempty"`
}

func (x *TournamentsRequest) Reset() {
	*x = TournamentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentsRequest) ProtoMessage() {}

func (x *TournamentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentsRequest.ProtoReflect.Descriptor instead.
func (*TournamentsRequest) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{3}
}

func (x *TournamentsRequest) GetSportId() uint32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *TournamentsRequest) GetDateFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.DateFrom
	}
	return nil
}

func (x *TournamentsRequest) GetDateTo() *timestamppb.Timestamp {
	if x != nil {
		return x.DateTo
	}
	return nil
}

type TournamentInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId uint32 `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
}

func (x *TournamentInfoRequest) Reset() {
	*x = TournamentInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentInfoRequest) ProtoMessage() {}

func (x *TournamentInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentInfoRequest.ProtoReflect.Descriptor instead.
func (*TournamentInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{4}
}

func (x *TournamentInfoRequest) GetTournamentId() uint32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

type PostMapStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId uint32 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (x *PostMapStatisticsRequest) Reset() {
	*x = PostMapStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostMapStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostMapStatisticsRequest) ProtoMessage() {}

func (x *PostMapStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostMapStatisticsRequest.ProtoReflect.Descriptor instead.
func (*PostMapStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{5}
}

func (x *PostMapStatisticsRequest) GetMapId() uint32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

type TournamentStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId uint32 `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
}

func (x *TournamentStatisticsRequest) Reset() {
	*x = TournamentStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentStatisticsRequest) ProtoMessage() {}

func (x *TournamentStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentStatisticsRequest.ProtoReflect.Descriptor instead.
func (*TournamentStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{6}
}

func (x *TournamentStatisticsRequest) GetTournamentId() uint32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

type TeamTournamentStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId uint32 `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	TeamId       uint32 `protobuf:"varint,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *TeamTournamentStatisticsRequest) Reset() {
	*x = TeamTournamentStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamTournamentStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamTournamentStatisticsRequest) ProtoMessage() {}

func (x *TeamTournamentStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamTournamentStatisticsRequest.ProtoReflect.Descriptor instead.
func (*TeamTournamentStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{7}
}

func (x *TeamTournamentStatisticsRequest) GetTournamentId() uint32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *TeamTournamentStatisticsRequest) GetTeamId() uint32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

type PlayerStatisticsAccordingRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SportId uint32 `protobuf:"varint,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	//    # Timeframe represents interval of computed statistics since current date. Eg. when current date is
	//    # 2021/08/31 and "timeframe" is THREE_MONTHS, then statistics interval would be 2021/06/01 - 2021/08/31.
	Timeframe Timeframe `protobuf:"varint,2,opt,name=timeframe,proto3,enum=bragi.Timeframe" json:"timeframe,omitempty"`
	Role      string    `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	TeamId    uint32    `protobuf:"varint,4,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *PlayerStatisticsAccordingRoleRequest) Reset() {
	*x = PlayerStatisticsAccordingRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStatisticsAccordingRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatisticsAccordingRoleRequest) ProtoMessage() {}

func (x *PlayerStatisticsAccordingRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatisticsAccordingRoleRequest.ProtoReflect.Descriptor instead.
func (*PlayerStatisticsAccordingRoleRequest) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{8}
}

func (x *PlayerStatisticsAccordingRoleRequest) GetSportId() uint32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *PlayerStatisticsAccordingRoleRequest) GetTimeframe() Timeframe {
	if x != nil {
		return x.Timeframe
	}
	return Timeframe_TIMEFRAME_UNSPECIFIED
}

func (x *PlayerStatisticsAccordingRoleRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *PlayerStatisticsAccordingRoleRequest) GetTeamId() uint32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

type Csgo2DMaFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapId uint32 `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (x *Csgo2DMaFeedRequest) Reset() {
	*x = Csgo2DMaFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Csgo2DMaFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Csgo2DMaFeedRequest) ProtoMessage() {}

func (x *Csgo2DMaFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Csgo2DMaFeedRequest.ProtoReflect.Descriptor instead.
func (*Csgo2DMaFeedRequest) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{9}
}

func (x *Csgo2DMaFeedRequest) GetMapId() uint32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

type CsgoScoreBoardFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId uint32 `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *CsgoScoreBoardFeedRequest) Reset() {
	*x = CsgoScoreBoardFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoScoreBoardFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoScoreBoardFeedRequest) ProtoMessage() {}

func (x *CsgoScoreBoardFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoScoreBoardFeedRequest.ProtoReflect.Descriptor instead.
func (*CsgoScoreBoardFeedRequest) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{10}
}

func (x *CsgoScoreBoardFeedRequest) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type CsgoEventsFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId uint32 `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *CsgoEventsFeedRequest) Reset() {
	*x = CsgoEventsFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoEventsFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoEventsFeedRequest) ProtoMessage() {}

func (x *CsgoEventsFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoEventsFeedRequest.ProtoReflect.Descriptor instead.
func (*CsgoEventsFeedRequest) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{11}
}

func (x *CsgoEventsFeedRequest) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

// The response message containing the greetings
type SportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sports []*Sport `protobuf:"bytes,1,rep,name=sports,proto3" json:"sports,omitempty"`
}

func (x *SportsResponse) Reset() {
	*x = SportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SportsResponse) ProtoMessage() {}

func (x *SportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SportsResponse.ProtoReflect.Descriptor instead.
func (*SportsResponse) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{12}
}

func (x *SportsResponse) GetSports() []*Sport {
	if x != nil {
		return x.Sports
	}
	return nil
}

type TournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournaments []*Tournament `protobuf:"bytes,1,rep,name=tournaments,proto3" json:"tournaments,omitempty"`
}

func (x *TournamentResponse) Reset() {
	*x = TournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentResponse) ProtoMessage() {}

func (x *TournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentResponse.ProtoReflect.Descriptor instead.
func (*TournamentResponse) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{13}
}

func (x *TournamentResponse) GetTournaments() []*Tournament {
	if x != nil {
		return x.Tournaments
	}
	return nil
}

type HistoricalStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to HistoricalStatistics:
	//	*HistoricalStatisticsResponse_Csgo
	HistoricalStatistics isHistoricalStatisticsResponse_HistoricalStatistics `protobuf_oneof:"historical_statistics"`
}

func (x *HistoricalStatisticsResponse) Reset() {
	*x = HistoricalStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalStatisticsResponse) ProtoMessage() {}

func (x *HistoricalStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalStatisticsResponse.ProtoReflect.Descriptor instead.
func (*HistoricalStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{14}
}

func (m *HistoricalStatisticsResponse) GetHistoricalStatistics() isHistoricalStatisticsResponse_HistoricalStatistics {
	if m != nil {
		return m.HistoricalStatistics
	}
	return nil
}

func (x *HistoricalStatisticsResponse) GetCsgo() *CsgoTeamStatistics {
	if x, ok := x.GetHistoricalStatistics().(*HistoricalStatisticsResponse_Csgo); ok {
		return x.Csgo
	}
	return nil
}

type isHistoricalStatisticsResponse_HistoricalStatistics interface {
	isHistoricalStatisticsResponse_HistoricalStatistics()
}

type HistoricalStatisticsResponse_Csgo struct {
	Csgo *CsgoTeamStatistics `protobuf:"bytes,1,opt,name=csgo,proto3,oneof"`
}

func (*HistoricalStatisticsResponse_Csgo) isHistoricalStatisticsResponse_HistoricalStatistics() {}

type LastFiveEncountersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches []*Match `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *LastFiveEncountersResponse) Reset() {
	*x = LastFiveEncountersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastFiveEncountersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastFiveEncountersResponse) ProtoMessage() {}

func (x *LastFiveEncountersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastFiveEncountersResponse.ProtoReflect.Descriptor instead.
func (*LastFiveEncountersResponse) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{15}
}

func (x *LastFiveEncountersResponse) GetMatches() []*Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

type PostMapStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PostMapStatistics:
	//	*PostMapStatisticsResponse_Csgo
	PostMapStatistics isPostMapStatisticsResponse_PostMapStatistics `protobuf_oneof:"post_map_statistics"`
}

func (x *PostMapStatisticsResponse) Reset() {
	*x = PostMapStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostMapStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostMapStatisticsResponse) ProtoMessage() {}

func (x *PostMapStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostMapStatisticsResponse.ProtoReflect.Descriptor instead.
func (*PostMapStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{16}
}

func (m *PostMapStatisticsResponse) GetPostMapStatistics() isPostMapStatisticsResponse_PostMapStatistics {
	if m != nil {
		return m.PostMapStatistics
	}
	return nil
}

func (x *PostMapStatisticsResponse) GetCsgo() *CsgoPostMapStatistics {
	if x, ok := x.GetPostMapStatistics().(*PostMapStatisticsResponse_Csgo); ok {
		return x.Csgo
	}
	return nil
}

type isPostMapStatisticsResponse_PostMapStatistics interface {
	isPostMapStatisticsResponse_PostMapStatistics()
}

type PostMapStatisticsResponse_Csgo struct {
	Csgo *CsgoPostMapStatistics `protobuf:"bytes,1,opt,name=csgo,proto3,oneof"`
}

func (*PostMapStatisticsResponse_Csgo) isPostMapStatisticsResponse_PostMapStatistics() {}

type TournamentInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TournamentInfo:
	//	*TournamentInfoResponse_Csgo
	TournamentInfo isTournamentInfoResponse_TournamentInfo `protobuf_oneof:"tournament_info"`
}

func (x *TournamentInfoResponse) Reset() {
	*x = TournamentInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentInfoResponse) ProtoMessage() {}

func (x *TournamentInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentInfoResponse.ProtoReflect.Descriptor instead.
func (*TournamentInfoResponse) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{17}
}

func (m *TournamentInfoResponse) GetTournamentInfo() isTournamentInfoResponse_TournamentInfo {
	if m != nil {
		return m.TournamentInfo
	}
	return nil
}

func (x *TournamentInfoResponse) GetCsgo() *CsgoTournamentInfo {
	if x, ok := x.GetTournamentInfo().(*TournamentInfoResponse_Csgo); ok {
		return x.Csgo
	}
	return nil
}

type isTournamentInfoResponse_TournamentInfo interface {
	isTournamentInfoResponse_TournamentInfo()
}

type TournamentInfoResponse_Csgo struct {
	Csgo *CsgoTournamentInfo `protobuf:"bytes,1,opt,name=csgo,proto3,oneof"`
}

func (*TournamentInfoResponse_Csgo) isTournamentInfoResponse_TournamentInfo() {}

type TournamentStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TournamentStatistics:
	//	*TournamentStatisticsResponse_Csgo
	TournamentStatistics isTournamentStatisticsResponse_TournamentStatistics `protobuf_oneof:"tournament_statistics"`
}

func (x *TournamentStatisticsResponse) Reset() {
	*x = TournamentStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentStatisticsResponse) ProtoMessage() {}

func (x *TournamentStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentStatisticsResponse.ProtoReflect.Descriptor instead.
func (*TournamentStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{18}
}

func (m *TournamentStatisticsResponse) GetTournamentStatistics() isTournamentStatisticsResponse_TournamentStatistics {
	if m != nil {
		return m.TournamentStatistics
	}
	return nil
}

func (x *TournamentStatisticsResponse) GetCsgo() *CsgoTournamentStatistics {
	if x, ok := x.GetTournamentStatistics().(*TournamentStatisticsResponse_Csgo); ok {
		return x.Csgo
	}
	return nil
}

type isTournamentStatisticsResponse_TournamentStatistics interface {
	isTournamentStatisticsResponse_TournamentStatistics()
}

type TournamentStatisticsResponse_Csgo struct {
	Csgo *CsgoTournamentStatistics `protobuf:"bytes,1,opt,name=csgo,proto3,oneof"`
}

func (*TournamentStatisticsResponse_Csgo) isTournamentStatisticsResponse_TournamentStatistics() {}

type TeamTournamentStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TeamsTournamentStatistics:
	//	*TeamTournamentStatisticsResponse_Csgo
	TeamsTournamentStatistics isTeamTournamentStatisticsResponse_TeamsTournamentStatistics `protobuf_oneof:"teams_tournament_statistics"`
}

func (x *TeamTournamentStatisticsResponse) Reset() {
	*x = TeamTournamentStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamTournamentStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamTournamentStatisticsResponse) ProtoMessage() {}

func (x *TeamTournamentStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamTournamentStatisticsResponse.ProtoReflect.Descriptor instead.
func (*TeamTournamentStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{19}
}

func (m *TeamTournamentStatisticsResponse) GetTeamsTournamentStatistics() isTeamTournamentStatisticsResponse_TeamsTournamentStatistics {
	if m != nil {
		return m.TeamsTournamentStatistics
	}
	return nil
}

func (x *TeamTournamentStatisticsResponse) GetCsgo() *CsgoTeamStatistics {
	if x, ok := x.GetTeamsTournamentStatistics().(*TeamTournamentStatisticsResponse_Csgo); ok {
		return x.Csgo
	}
	return nil
}

type isTeamTournamentStatisticsResponse_TeamsTournamentStatistics interface {
	isTeamTournamentStatisticsResponse_TeamsTournamentStatistics()
}

type TeamTournamentStatisticsResponse_Csgo struct {
	Csgo *CsgoTeamStatistics `protobuf:"bytes,1,opt,name=csgo,proto3,oneof"`
}

func (*TeamTournamentStatisticsResponse_Csgo) isTeamTournamentStatisticsResponse_TeamsTournamentStatistics() {
}

type PlayerStatisticsAccordingRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PlayerStatisticsAccordingRole:
	//	*PlayerStatisticsAccordingRoleResponse_Csgo
	PlayerStatisticsAccordingRole isPlayerStatisticsAccordingRoleResponse_PlayerStatisticsAccordingRole `protobuf_oneof:"player_statistics_according_role"`
}

func (x *PlayerStatisticsAccordingRoleResponse) Reset() {
	*x = PlayerStatisticsAccordingRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStatisticsAccordingRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatisticsAccordingRoleResponse) ProtoMessage() {}

func (x *PlayerStatisticsAccordingRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatisticsAccordingRoleResponse.ProtoReflect.Descriptor instead.
func (*PlayerStatisticsAccordingRoleResponse) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{20}
}

func (m *PlayerStatisticsAccordingRoleResponse) GetPlayerStatisticsAccordingRole() isPlayerStatisticsAccordingRoleResponse_PlayerStatisticsAccordingRole {
	if m != nil {
		return m.PlayerStatisticsAccordingRole
	}
	return nil
}

func (x *PlayerStatisticsAccordingRoleResponse) GetCsgo() *CsgoPlayerStatistics {
	if x, ok := x.GetPlayerStatisticsAccordingRole().(*PlayerStatisticsAccordingRoleResponse_Csgo); ok {
		return x.Csgo
	}
	return nil
}

type isPlayerStatisticsAccordingRoleResponse_PlayerStatisticsAccordingRole interface {
	isPlayerStatisticsAccordingRoleResponse_PlayerStatisticsAccordingRole()
}

type PlayerStatisticsAccordingRoleResponse_Csgo struct {
	Csgo *CsgoPlayerStatistics `protobuf:"bytes,1,opt,name=csgo,proto3,oneof"`
}

func (*PlayerStatisticsAccordingRoleResponse_Csgo) isPlayerStatisticsAccordingRoleResponse_PlayerStatisticsAccordingRole() {
}

type CsgoTeamStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team                   *Team                             `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
	PlayerStatistics       []*CsgoPlayerStatistics           `protobuf:"bytes,3,rep,name=player_statistics,json=playerStatistics,proto3" json:"player_statistics,omitempty"`
	MapVote                *CsgoMapVote                      `protobuf:"bytes,4,opt,name=map_vote,json=mapVote,proto3" json:"map_vote,omitempty"`
	MapWinrate             []*CsgoMapStatistics              `protobuf:"bytes,5,rep,name=map_winrate,json=mapWinrate,proto3" json:"map_winrate,omitempty"`
	RoundWinrate           []*CsgoMapStatisticsAccordingSide `protobuf:"bytes,6,rep,name=round_winrate,json=roundWinrate,proto3" json:"round_winrate,omitempty"`
	OverallMapWinrate      *StatisticsValues                 `protobuf:"bytes,7,opt,name=overall_map_winrate,json=overallMapWinrate,proto3" json:"overall_map_winrate,omitempty"`
	OverallRoundWinrate    *CsgoStatisticsSideValues         `protobuf:"bytes,8,opt,name=overall_round_winrate,json=overallRoundWinrate,proto3" json:"overall_round_winrate,omitempty"`
	PistolWinrate          *CsgoStatisticsSideValues         `protobuf:"bytes,9,opt,name=pistol_winrate,json=pistolWinrate,proto3" json:"pistol_winrate,omitempty"`
	PistolWinConversion    *CsgoStatisticsSideValues         `protobuf:"bytes,10,opt,name=pistol_win_conversion,json=pistolWinConversion,proto3" json:"pistol_win_conversion,omitempty"`
	PistolLossConversion   *CsgoStatisticsSideValues         `protobuf:"bytes,11,opt,name=pistol_loss_conversion,json=pistolLossConversion,proto3" json:"pistol_loss_conversion,omitempty"`
	Kills                  *CsgoStatisticsSideValues         `protobuf:"bytes,12,opt,name=kills,proto3" json:"kills,omitempty"`
	Deaths                 *CsgoStatisticsSideValues         `protobuf:"bytes,13,opt,name=deaths,proto3" json:"deaths,omitempty"`
	KillsOverDeaths        *CsgoStatisticsSideValues         `protobuf:"bytes,14,opt,name=kills_over_deaths,json=killsOverDeaths,proto3" json:"kills_over_deaths,omitempty"`
	Assists                *CsgoStatisticsSideValues         `protobuf:"bytes,15,opt,name=assists,proto3" json:"assists,omitempty"`
	FlashAssists           *CsgoStatisticsSideValues         `protobuf:"bytes,16,opt,name=flash_assists,json=flashAssists,proto3" json:"flash_assists,omitempty"`
	Damage                 *CsgoStatisticsSideValues         `protobuf:"bytes,17,opt,name=damage,proto3" json:"damage,omitempty"`
	HeadshotRate           *CsgoStatisticsSideValues         `protobuf:"bytes,18,opt,name=headshot_rate,json=headshotRate,proto3" json:"headshot_rate,omitempty"`
	OpeningKills           *CsgoStatisticsSideValues         `protobuf:"bytes,19,opt,name=opening_kills,json=openingKills,proto3" json:"opening_kills,omitempty"`
	OpeningConversion      *CsgoStatisticsSideValues         `protobuf:"bytes,20,opt,name=opening_conversion,json=openingConversion,proto3" json:"opening_conversion,omitempty"`
	OpeningDeathConversion *CsgoStatisticsSideValues         `protobuf:"bytes,21,opt,name=opening_death_conversion,json=openingDeathConversion,proto3" json:"opening_death_conversion,omitempty"`
	AwpKills               *CsgoStatisticsSideValues         `protobuf:"bytes,22,opt,name=awp_kills,json=awpKills,proto3" json:"awp_kills,omitempty"`
	EliminationWinrate     *CsgoStatisticsSideValues         `protobuf:"bytes,23,opt,name=elimination_winrate,json=eliminationWinrate,proto3" json:"elimination_winrate,omitempty"`
	ObjectiveWinrate       *CsgoStatisticsSideValues         `protobuf:"bytes,24,opt,name=objective_winrate,json=objectiveWinrate,proto3" json:"objective_winrate,omitempty"`
	UtilityDamage          *CsgoStatisticsSideValues         `protobuf:"bytes,25,opt,name=utility_damage,json=utilityDamage,proto3" json:"utility_damage,omitempty"`
	FirstToWin_3Rounds     *CsgoStatisticsSideValues         `protobuf:"bytes,26,opt,name=first_to_win_3_rounds,json=firstToWin3Rounds,proto3" json:"first_to_win_3_rounds,omitempty"`
	FirstToWin_6Rounds     *CsgoStatisticsSideValues         `protobuf:"bytes,27,opt,name=first_to_win_6_rounds,json=firstToWin6Rounds,proto3" json:"first_to_win_6_rounds,omitempty"`
	FirstToWin_9Rounds     *CsgoStatisticsSideValues         `protobuf:"bytes,28,opt,name=first_to_win_9_rounds,json=firstToWin9Rounds,proto3" json:"first_to_win_9_rounds,omitempty"`
	FirstToWin_12Rounds    *CsgoStatisticsSideValues         `protobuf:"bytes,29,opt,name=first_to_win_12_rounds,json=firstToWin12Rounds,proto3" json:"first_to_win_12_rounds,omitempty"`
	RoundsLost             *CsgoStatisticsSideValues         `protobuf:"bytes,30,opt,name=rounds_lost,json=roundsLost,proto3" json:"rounds_lost,omitempty"`
	FavouriteWeapons       []*CsgoWeaponStatistics           `protobuf:"bytes,31,rep,name=favourite_weapons,json=favouriteWeapons,proto3" json:"favourite_weapons,omitempty"`
	Form                   []*Match                          `protobuf:"bytes,32,rep,name=form,proto3" json:"form,omitempty"`
}

func (x *CsgoTeamStatistics) Reset() {
	*x = CsgoTeamStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTeamStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTeamStatistics) ProtoMessage() {}

func (x *CsgoTeamStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTeamStatistics.ProtoReflect.Descriptor instead.
func (*CsgoTeamStatistics) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{21}
}

func (x *CsgoTeamStatistics) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *CsgoTeamStatistics) GetPlayerStatistics() []*CsgoPlayerStatistics {
	if x != nil {
		return x.PlayerStatistics
	}
	return nil
}

func (x *CsgoTeamStatistics) GetMapVote() *CsgoMapVote {
	if x != nil {
		return x.MapVote
	}
	return nil
}

func (x *CsgoTeamStatistics) GetMapWinrate() []*CsgoMapStatistics {
	if x != nil {
		return x.MapWinrate
	}
	return nil
}

func (x *CsgoTeamStatistics) GetRoundWinrate() []*CsgoMapStatisticsAccordingSide {
	if x != nil {
		return x.RoundWinrate
	}
	return nil
}

func (x *CsgoTeamStatistics) GetOverallMapWinrate() *StatisticsValues {
	if x != nil {
		return x.OverallMapWinrate
	}
	return nil
}

func (x *CsgoTeamStatistics) GetOverallRoundWinrate() *CsgoStatisticsSideValues {
	if x != nil {
		return x.OverallRoundWinrate
	}
	return nil
}

func (x *CsgoTeamStatistics) GetPistolWinrate() *CsgoStatisticsSideValues {
	if x != nil {
		return x.PistolWinrate
	}
	return nil
}

func (x *CsgoTeamStatistics) GetPistolWinConversion() *CsgoStatisticsSideValues {
	if x != nil {
		return x.PistolWinConversion
	}
	return nil
}

func (x *CsgoTeamStatistics) GetPistolLossConversion() *CsgoStatisticsSideValues {
	if x != nil {
		return x.PistolLossConversion
	}
	return nil
}

func (x *CsgoTeamStatistics) GetKills() *CsgoStatisticsSideValues {
	if x != nil {
		return x.Kills
	}
	return nil
}

func (x *CsgoTeamStatistics) GetDeaths() *CsgoStatisticsSideValues {
	if x != nil {
		return x.Deaths
	}
	return nil
}

func (x *CsgoTeamStatistics) GetKillsOverDeaths() *CsgoStatisticsSideValues {
	if x != nil {
		return x.KillsOverDeaths
	}
	return nil
}

func (x *CsgoTeamStatistics) GetAssists() *CsgoStatisticsSideValues {
	if x != nil {
		return x.Assists
	}
	return nil
}

func (x *CsgoTeamStatistics) GetFlashAssists() *CsgoStatisticsSideValues {
	if x != nil {
		return x.FlashAssists
	}
	return nil
}

func (x *CsgoTeamStatistics) GetDamage() *CsgoStatisticsSideValues {
	if x != nil {
		return x.Damage
	}
	return nil
}

func (x *CsgoTeamStatistics) GetHeadshotRate() *CsgoStatisticsSideValues {
	if x != nil {
		return x.HeadshotRate
	}
	return nil
}

func (x *CsgoTeamStatistics) GetOpeningKills() *CsgoStatisticsSideValues {
	if x != nil {
		return x.OpeningKills
	}
	return nil
}

func (x *CsgoTeamStatistics) GetOpeningConversion() *CsgoStatisticsSideValues {
	if x != nil {
		return x.OpeningConversion
	}
	return nil
}

func (x *CsgoTeamStatistics) GetOpeningDeathConversion() *CsgoStatisticsSideValues {
	if x != nil {
		return x.OpeningDeathConversion
	}
	return nil
}

func (x *CsgoTeamStatistics) GetAwpKills() *CsgoStatisticsSideValues {
	if x != nil {
		return x.AwpKills
	}
	return nil
}

func (x *CsgoTeamStatistics) GetEliminationWinrate() *CsgoStatisticsSideValues {
	if x != nil {
		return x.EliminationWinrate
	}
	return nil
}

func (x *CsgoTeamStatistics) GetObjectiveWinrate() *CsgoStatisticsSideValues {
	if x != nil {
		return x.ObjectiveWinrate
	}
	return nil
}

func (x *CsgoTeamStatistics) GetUtilityDamage() *CsgoStatisticsSideValues {
	if x != nil {
		return x.UtilityDamage
	}
	return nil
}

func (x *CsgoTeamStatistics) GetFirstToWin_3Rounds() *CsgoStatisticsSideValues {
	if x != nil {
		return x.FirstToWin_3Rounds
	}
	return nil
}

func (x *CsgoTeamStatistics) GetFirstToWin_6Rounds() *CsgoStatisticsSideValues {
	if x != nil {
		return x.FirstToWin_6Rounds
	}
	return nil
}

func (x *CsgoTeamStatistics) GetFirstToWin_9Rounds() *CsgoStatisticsSideValues {
	if x != nil {
		return x.FirstToWin_9Rounds
	}
	return nil
}

func (x *CsgoTeamStatistics) GetFirstToWin_12Rounds() *CsgoStatisticsSideValues {
	if x != nil {
		return x.FirstToWin_12Rounds
	}
	return nil
}

func (x *CsgoTeamStatistics) GetRoundsLost() *CsgoStatisticsSideValues {
	if x != nil {
		return x.RoundsLost
	}
	return nil
}

func (x *CsgoTeamStatistics) GetFavouriteWeapons() []*CsgoWeaponStatistics {
	if x != nil {
		return x.FavouriteWeapons
	}
	return nil
}

func (x *CsgoTeamStatistics) GetForm() []*Match {
	if x != nil {
		return x.Form
	}
	return nil
}

type CsgoPlayerStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player           *Player                 `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	Kills            *StatisticsValues       `protobuf:"bytes,2,opt,name=kills,proto3" json:"kills,omitempty"`
	Deaths           *StatisticsValues       `protobuf:"bytes,3,opt,name=deaths,proto3" json:"deaths,omitempty"`
	Assists          *StatisticsValues       `protobuf:"bytes,4,opt,name=assists,proto3" json:"assists,omitempty"`
	KillsOverDeaths  *StatisticsValues       `protobuf:"bytes,5,opt,name=kills_over_deaths,json=killsOverDeaths,proto3" json:"kills_over_deaths,omitempty"`
	Damage           *StatisticsValues       `protobuf:"bytes,6,opt,name=damage,proto3" json:"damage,omitempty"`
	HeadshotRate     *StatisticsValues       `protobuf:"bytes,7,opt,name=headshot_rate,json=headshotRate,proto3" json:"headshot_rate,omitempty"`
	FlashAssists     *StatisticsValues       `protobuf:"bytes,8,opt,name=flash_assists,json=flashAssists,proto3" json:"flash_assists,omitempty"`
	OpeningKills     *StatisticsValues       `protobuf:"bytes,9,opt,name=opening_kills,json=openingKills,proto3" json:"opening_kills,omitempty"`
	AwpKills         *StatisticsValues       `protobuf:"bytes,10,opt,name=awp_kills,json=awpKills,proto3" json:"awp_kills,omitempty"`
	UtilityDamage    *StatisticsValues       `protobuf:"bytes,11,opt,name=utility_damage,json=utilityDamage,proto3" json:"utility_damage,omitempty"`
	EnemiesFlashed   *StatisticsValues       `protobuf:"bytes,12,opt,name=enemies_flashed,json=enemiesFlashed,proto3" json:"enemies_flashed,omitempty"`
	MultiKillRounds  *StatisticsValues       `protobuf:"bytes,13,opt,name=multi_kill_rounds,json=multiKillRounds,proto3" json:"multi_kill_rounds,omitempty"`
	ClutchRounds     *StatisticsValues       `protobuf:"bytes,14,opt,name=clutch_rounds,json=clutchRounds,proto3" json:"clutch_rounds,omitempty"`
	LurkKills        *StatisticsValues       `protobuf:"bytes,15,opt,name=lurk_kills,json=lurkKills,proto3" json:"lurk_kills,omitempty"`
	GrenadesUsed     *StatisticsValues       `protobuf:"bytes,16,opt,name=grenades_used,json=grenadesUsed,proto3" json:"grenades_used,omitempty"`
	FavouriteWeapons []*CsgoWeaponStatistics `protobuf:"bytes,17,rep,name=favourite_weapons,json=favouriteWeapons,proto3" json:"favourite_weapons,omitempty"`
}

func (x *CsgoPlayerStatistics) Reset() {
	*x = CsgoPlayerStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerStatistics) ProtoMessage() {}

func (x *CsgoPlayerStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerStatistics.ProtoReflect.Descriptor instead.
func (*CsgoPlayerStatistics) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{22}
}

func (x *CsgoPlayerStatistics) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *CsgoPlayerStatistics) GetKills() *StatisticsValues {
	if x != nil {
		return x.Kills
	}
	return nil
}

func (x *CsgoPlayerStatistics) GetDeaths() *StatisticsValues {
	if x != nil {
		return x.Deaths
	}
	return nil
}

func (x *CsgoPlayerStatistics) GetAssists() *StatisticsValues {
	if x != nil {
		return x.Assists
	}
	return nil
}

func (x *CsgoPlayerStatistics) GetKillsOverDeaths() *StatisticsValues {
	if x != nil {
		return x.KillsOverDeaths
	}
	return nil
}

func (x *CsgoPlayerStatistics) GetDamage() *StatisticsValues {
	if x != nil {
		return x.Damage
	}
	return nil
}

func (x *CsgoPlayerStatistics) GetHeadshotRate() *StatisticsValues {
	if x != nil {
		return x.HeadshotRate
	}
	return nil
}

func (x *CsgoPlayerStatistics) GetFlashAssists() *StatisticsValues {
	if x != nil {
		return x.FlashAssists
	}
	return nil
}

func (x *CsgoPlayerStatistics) GetOpeningKills() *StatisticsValues {
	if x != nil {
		return x.OpeningKills
	}
	return nil
}

func (x *CsgoPlayerStatistics) GetAwpKills() *StatisticsValues {
	if x != nil {
		return x.AwpKills
	}
	return nil
}

func (x *CsgoPlayerStatistics) GetUtilityDamage() *StatisticsValues {
	if x != nil {
		return x.UtilityDamage
	}
	return nil
}

func (x *CsgoPlayerStatistics) GetEnemiesFlashed() *StatisticsValues {
	if x != nil {
		return x.EnemiesFlashed
	}
	return nil
}

func (x *CsgoPlayerStatistics) GetMultiKillRounds() *StatisticsValues {
	if x != nil {
		return x.MultiKillRounds
	}
	return nil
}

func (x *CsgoPlayerStatistics) GetClutchRounds() *StatisticsValues {
	if x != nil {
		return x.ClutchRounds
	}
	return nil
}

func (x *CsgoPlayerStatistics) GetLurkKills() *StatisticsValues {
	if x != nil {
		return x.LurkKills
	}
	return nil
}

func (x *CsgoPlayerStatistics) GetGrenadesUsed() *StatisticsValues {
	if x != nil {
		return x.GrenadesUsed
	}
	return nil
}

func (x *CsgoPlayerStatistics) GetFavouriteWeapons() []*CsgoWeaponStatistics {
	if x != nil {
		return x.FavouriteWeapons
	}
	return nil
}

type CsgoPostMapStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map                *CsgoMap                   `protobuf:"bytes,1,opt,name=map,proto3" json:"map,omitempty"`
	HomeTeamStatistics *CsgoTeamPostMapStatistics `protobuf:"bytes,2,opt,name=home_team_statistics,json=homeTeamStatistics,proto3" json:"home_team_statistics,omitempty"`
	AwayTeamStatistics *CsgoTeamPostMapStatistics `protobuf:"bytes,3,opt,name=away_team_statistics,json=awayTeamStatistics,proto3" json:"away_team_statistics,omitempty"`
	Duels              []*CsgoPlayersDuel         `protobuf:"bytes,4,rep,name=duels,proto3" json:"duels,omitempty"`
	Rounds             []*CsgoRoundPostmap        `protobuf:"bytes,5,rep,name=rounds,proto3" json:"rounds,omitempty"`
}

func (x *CsgoPostMapStatistics) Reset() {
	*x = CsgoPostMapStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPostMapStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPostMapStatistics) ProtoMessage() {}

func (x *CsgoPostMapStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPostMapStatistics.ProtoReflect.Descriptor instead.
func (*CsgoPostMapStatistics) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{23}
}

func (x *CsgoPostMapStatistics) GetMap() *CsgoMap {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *CsgoPostMapStatistics) GetHomeTeamStatistics() *CsgoTeamPostMapStatistics {
	if x != nil {
		return x.HomeTeamStatistics
	}
	return nil
}

func (x *CsgoPostMapStatistics) GetAwayTeamStatistics() *CsgoTeamPostMapStatistics {
	if x != nil {
		return x.AwayTeamStatistics
	}
	return nil
}

func (x *CsgoPostMapStatistics) GetDuels() []*CsgoPlayersDuel {
	if x != nil {
		return x.Duels
	}
	return nil
}

func (x *CsgoPostMapStatistics) GetRounds() []*CsgoRoundPostmap {
	if x != nil {
		return x.Rounds
	}
	return nil
}

type CsgoTournamentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Tournament      *Tournament            `protobuf:"bytes,2,opt,name=tournament,proto3" json:"tournament,omitempty"`
	Organizer       *string                `protobuf:"bytes,3,opt,name=organizer,proto3,oneof" json:"organizer,omitempty"`
	Location        *string                `protobuf:"bytes,4,opt,name=location,proto3,oneof" json:"location,omitempty"`
	PrizePool       *string                `protobuf:"bytes,5,opt,name=prize_pool,json=prizePool,proto3,oneof" json:"prize_pool,omitempty"`
	IsOffline       *bool                  `protobuf:"varint,6,opt,name=is_offline,json=isOffline,proto3,oneof" json:"is_offline,omitempty"`
	IsQualification *bool                  `protobuf:"varint,7,opt,name=is_qualification,json=isQualification,proto3,oneof" json:"is_qualification,omitempty"`
	Teams           []*CsgoTeam            `protobuf:"bytes,8,rep,name=teams,proto3" json:"teams,omitempty"`
	Matches         []*Match               `protobuf:"bytes,9,rep,name=matches,proto3" json:"matches,omitempty"`
	Blocks          []*CsgoTournamentBlock `protobuf:"bytes,10,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *CsgoTournamentInfo) Reset() {
	*x = CsgoTournamentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTournamentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTournamentInfo) ProtoMessage() {}

func (x *CsgoTournamentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTournamentInfo.ProtoReflect.Descriptor instead.
func (*CsgoTournamentInfo) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{24}
}

func (x *CsgoTournamentInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CsgoTournamentInfo) GetTournament() *Tournament {
	if x != nil {
		return x.Tournament
	}
	return nil
}

func (x *CsgoTournamentInfo) GetOrganizer() string {
	if x != nil && x.Organizer != nil {
		return *x.Organizer
	}
	return ""
}

func (x *CsgoTournamentInfo) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *CsgoTournamentInfo) GetPrizePool() string {
	if x != nil && x.PrizePool != nil {
		return *x.PrizePool
	}
	return ""
}

func (x *CsgoTournamentInfo) GetIsOffline() bool {
	if x != nil && x.IsOffline != nil {
		return *x.IsOffline
	}
	return false
}

func (x *CsgoTournamentInfo) GetIsQualification() bool {
	if x != nil && x.IsQualification != nil {
		return *x.IsQualification
	}
	return false
}

func (x *CsgoTournamentInfo) GetTeams() []*CsgoTeam {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *CsgoTournamentInfo) GetMatches() []*Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *CsgoTournamentInfo) GetBlocks() []*CsgoTournamentBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type CsgoTournamentStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                uint32                              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Tournament                        *Tournament                         `protobuf:"bytes,2,opt,name=tournament,proto3" json:"tournament,omitempty"`
	TerroristsWinrateInPercent        *float32                            `protobuf:"fixed32,3,opt,name=terrorists_winrate_in_percent,json=terroristsWinrateInPercent,proto3,oneof" json:"terrorists_winrate_in_percent,omitempty"`
	CounterTerroristsWinrateInPercent *float32                            `protobuf:"fixed32,4,opt,name=counter_terrorists_winrate_in_percent,json=counterTerroristsWinrateInPercent,proto3,oneof" json:"counter_terrorists_winrate_in_percent,omitempty"`
	BestTeams                         *CsgoTournamentBestTeamStatistics   `protobuf:"bytes,5,opt,name=best_teams,json=bestTeams,proto3" json:"best_teams,omitempty"`
	BestPlayers                       *CsgoTournamentBestPlayerStatistics `protobuf:"bytes,6,opt,name=best_players,json=bestPlayers,proto3" json:"best_players,omitempty"`
	TournamentMapsStatistics          []*CsgoTournamentMapStatistics      `protobuf:"bytes,7,rep,name=tournament_maps_statistics,json=tournamentMapsStatistics,proto3" json:"tournament_maps_statistics,omitempty"`
}

func (x *CsgoTournamentStatistics) Reset() {
	*x = CsgoTournamentStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTournamentStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTournamentStatistics) ProtoMessage() {}

func (x *CsgoTournamentStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTournamentStatistics.ProtoReflect.Descriptor instead.
func (*CsgoTournamentStatistics) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{25}
}

func (x *CsgoTournamentStatistics) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CsgoTournamentStatistics) GetTournament() *Tournament {
	if x != nil {
		return x.Tournament
	}
	return nil
}

func (x *CsgoTournamentStatistics) GetTerroristsWinrateInPercent() float32 {
	if x != nil && x.TerroristsWinrateInPercent != nil {
		return *x.TerroristsWinrateInPercent
	}
	return 0
}

func (x *CsgoTournamentStatistics) GetCounterTerroristsWinrateInPercent() float32 {
	if x != nil && x.CounterTerroristsWinrateInPercent != nil {
		return *x.CounterTerroristsWinrateInPercent
	}
	return 0
}

func (x *CsgoTournamentStatistics) GetBestTeams() *CsgoTournamentBestTeamStatistics {
	if x != nil {
		return x.BestTeams
	}
	return nil
}

func (x *CsgoTournamentStatistics) GetBestPlayers() *CsgoTournamentBestPlayerStatistics {
	if x != nil {
		return x.BestPlayers
	}
	return nil
}

func (x *CsgoTournamentStatistics) GetTournamentMapsStatistics() []*CsgoTournamentMapStatistics {
	if x != nil {
		return x.TournamentMapsStatistics
	}
	return nil
}

type CsgoTeamPostMapStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      uint32                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Team                    *Team                          `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
	PlayersStatistics       []*CsgoPlayerPostMapStatistics `protobuf:"bytes,3,rep,name=players_statistics,json=playersStatistics,proto3" json:"players_statistics,omitempty"`
	RoundsWon               int32                          `protobuf:"varint,4,opt,name=rounds_won,json=roundsWon,proto3" json:"rounds_won,omitempty"`
	RoundsLost              int32                          `protobuf:"varint,5,opt,name=rounds_lost,json=roundsLost,proto3" json:"rounds_lost,omitempty"`
	Kills                   *PostMapStatisticsValues       `protobuf:"bytes,6,opt,name=kills,proto3" json:"kills,omitempty"`
	Deaths                  *PostMapStatisticsValues       `protobuf:"bytes,7,opt,name=deaths,proto3" json:"deaths,omitempty"`
	Assists                 *PostMapStatisticsValues       `protobuf:"bytes,8,opt,name=assists,proto3" json:"assists,omitempty"`
	KillsOverDeaths         *PostMapStatisticsValues       `protobuf:"bytes,9,opt,name=kills_over_deaths,json=killsOverDeaths,proto3" json:"kills_over_deaths,omitempty"`
	Damage                  *PostMapStatisticsValues       `protobuf:"bytes,10,opt,name=damage,proto3" json:"damage,omitempty"`
	HeadshotRate            *PostMapStatisticsValues       `protobuf:"bytes,11,opt,name=headshot_rate,json=headshotRate,proto3" json:"headshot_rate,omitempty"`
	FlashAssists            *PostMapStatisticsValues       `protobuf:"bytes,12,opt,name=flash_assists,json=flashAssists,proto3" json:"flash_assists,omitempty"`
	OpeningKills            *PostMapStatisticsValues       `protobuf:"bytes,13,opt,name=opening_kills,json=openingKills,proto3" json:"opening_kills,omitempty"`
	KillsDifference         *PostMapStatisticsValues       `protobuf:"bytes,14,opt,name=kills_difference,json=killsDifference,proto3" json:"kills_difference,omitempty"`
	KillCost                *PostMapStatisticsValues       `protobuf:"bytes,15,opt,name=kill_cost,json=killCost,proto3" json:"kill_cost,omitempty"`
	AccuracyRate            *PostMapStatisticsValues       `protobuf:"bytes,16,opt,name=accuracy_rate,json=accuracyRate,proto3" json:"accuracy_rate,omitempty"`
	KillsWithDroppedWeapons *PostMapStatisticsValues       `protobuf:"bytes,17,opt,name=kills_with_dropped_weapons,json=killsWithDroppedWeapons,proto3" json:"kills_with_dropped_weapons,omitempty"`
	FavouriteWeapons        []*CsgoWeaponPostMapStatistics `protobuf:"bytes,18,rep,name=favourite_weapons,json=favouriteWeapons,proto3" json:"favourite_weapons,omitempty"`
}

func (x *CsgoTeamPostMapStatistics) Reset() {
	*x = CsgoTeamPostMapStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTeamPostMapStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTeamPostMapStatistics) ProtoMessage() {}

func (x *CsgoTeamPostMapStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTeamPostMapStatistics.ProtoReflect.Descriptor instead.
func (*CsgoTeamPostMapStatistics) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{26}
}

func (x *CsgoTeamPostMapStatistics) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CsgoTeamPostMapStatistics) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *CsgoTeamPostMapStatistics) GetPlayersStatistics() []*CsgoPlayerPostMapStatistics {
	if x != nil {
		return x.PlayersStatistics
	}
	return nil
}

func (x *CsgoTeamPostMapStatistics) GetRoundsWon() int32 {
	if x != nil {
		return x.RoundsWon
	}
	return 0
}

func (x *CsgoTeamPostMapStatistics) GetRoundsLost() int32 {
	if x != nil {
		return x.RoundsLost
	}
	return 0
}

func (x *CsgoTeamPostMapStatistics) GetKills() *PostMapStatisticsValues {
	if x != nil {
		return x.Kills
	}
	return nil
}

func (x *CsgoTeamPostMapStatistics) GetDeaths() *PostMapStatisticsValues {
	if x != nil {
		return x.Deaths
	}
	return nil
}

func (x *CsgoTeamPostMapStatistics) GetAssists() *PostMapStatisticsValues {
	if x != nil {
		return x.Assists
	}
	return nil
}

func (x *CsgoTeamPostMapStatistics) GetKillsOverDeaths() *PostMapStatisticsValues {
	if x != nil {
		return x.KillsOverDeaths
	}
	return nil
}

func (x *CsgoTeamPostMapStatistics) GetDamage() *PostMapStatisticsValues {
	if x != nil {
		return x.Damage
	}
	return nil
}

func (x *CsgoTeamPostMapStatistics) GetHeadshotRate() *PostMapStatisticsValues {
	if x != nil {
		return x.HeadshotRate
	}
	return nil
}

func (x *CsgoTeamPostMapStatistics) GetFlashAssists() *PostMapStatisticsValues {
	if x != nil {
		return x.FlashAssists
	}
	return nil
}

func (x *CsgoTeamPostMapStatistics) GetOpeningKills() *PostMapStatisticsValues {
	if x != nil {
		return x.OpeningKills
	}
	return nil
}

func (x *CsgoTeamPostMapStatistics) GetKillsDifference() *PostMapStatisticsValues {
	if x != nil {
		return x.KillsDifference
	}
	return nil
}

func (x *CsgoTeamPostMapStatistics) GetKillCost() *PostMapStatisticsValues {
	if x != nil {
		return x.KillCost
	}
	return nil
}

func (x *CsgoTeamPostMapStatistics) GetAccuracyRate() *PostMapStatisticsValues {
	if x != nil {
		return x.AccuracyRate
	}
	return nil
}

func (x *CsgoTeamPostMapStatistics) GetKillsWithDroppedWeapons() *PostMapStatisticsValues {
	if x != nil {
		return x.KillsWithDroppedWeapons
	}
	return nil
}

func (x *CsgoTeamPostMapStatistics) GetFavouriteWeapons() []*CsgoWeaponPostMapStatistics {
	if x != nil {
		return x.FavouriteWeapons
	}
	return nil
}

type CsgoPlayerPostMapStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint32                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Player           *Player                        `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`
	PlayerMapRole    CsgoPlayerRole                 `protobuf:"varint,3,opt,name=player_map_role,json=playerMapRole,proto3,enum=bragi.CsgoPlayerRole" json:"player_map_role,omitempty"`
	Kills            *PostMapStatisticsValues       `protobuf:"bytes,4,opt,name=kills,proto3" json:"kills,omitempty"`
	Deaths           *PostMapStatisticsValues       `protobuf:"bytes,5,opt,name=deaths,proto3" json:"deaths,omitempty"`
	Assists          *PostMapStatisticsValues       `protobuf:"bytes,6,opt,name=assists,proto3" json:"assists,omitempty"`
	RoundsSurvived   *PostMapStatisticsValues       `protobuf:"bytes,7,opt,name=rounds_survived,json=roundsSurvived,proto3" json:"rounds_survived,omitempty"`
	KillsOverDeaths  *PostMapStatisticsValues       `protobuf:"bytes,8,opt,name=kills_over_deaths,json=killsOverDeaths,proto3" json:"kills_over_deaths,omitempty"`
	Damage           *PostMapStatisticsValues       `protobuf:"bytes,9,opt,name=damage,proto3" json:"damage,omitempty"`
	HeadshotRate     *PostMapStatisticsValues       `protobuf:"bytes,10,opt,name=headshot_rate,json=headshotRate,proto3" json:"headshot_rate,omitempty"`
	FlashAssists     *PostMapStatisticsValues       `protobuf:"bytes,11,opt,name=flash_assists,json=flashAssists,proto3" json:"flash_assists,omitempty"`
	OpeningKills     *PostMapStatisticsValues       `protobuf:"bytes,12,opt,name=opening_kills,json=openingKills,proto3" json:"opening_kills,omitempty"`
	ClutchRounds     *PostMapStatisticsValues       `protobuf:"bytes,13,opt,name=clutch_rounds,json=clutchRounds,proto3" json:"clutch_rounds,omitempty"`
	UtilityDamage    *PostMapStatisticsValues       `protobuf:"bytes,14,opt,name=utility_damage,json=utilityDamage,proto3" json:"utility_damage,omitempty"`
	GrenadesUsed     *PostMapStatisticsValues       `protobuf:"bytes,15,opt,name=grenades_used,json=grenadesUsed,proto3" json:"grenades_used,omitempty"`
	EnemiesFlashed   *PostMapStatisticsValues       `protobuf:"bytes,16,opt,name=enemies_flashed,json=enemiesFlashed,proto3" json:"enemies_flashed,omitempty"`
	AwpKills         *PostMapStatisticsValues       `protobuf:"bytes,17,opt,name=awp_kills,json=awpKills,proto3" json:"awp_kills,omitempty"`
	LurkKills        *PostMapStatisticsValues       `protobuf:"bytes,18,opt,name=lurk_kills,json=lurkKills,proto3" json:"lurk_kills,omitempty"`
	KillsDifference  *PostMapStatisticsValues       `protobuf:"bytes,19,opt,name=kills_difference,json=killsDifference,proto3" json:"kills_difference,omitempty"`
	KillCost         *PostMapStatisticsValues       `protobuf:"bytes,20,opt,name=kill_cost,json=killCost,proto3" json:"kill_cost,omitempty"`
	AccuracyRate     *PostMapStatisticsValues       `protobuf:"bytes,21,opt,name=accuracy_rate,json=accuracyRate,proto3" json:"accuracy_rate,omitempty"`
	FavouriteWeapons []*CsgoWeaponPostMapStatistics `protobuf:"bytes,22,rep,name=favourite_weapons,json=favouriteWeapons,proto3" json:"favourite_weapons,omitempty"`
}

func (x *CsgoPlayerPostMapStatistics) Reset() {
	*x = CsgoPlayerPostMapStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerPostMapStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerPostMapStatistics) ProtoMessage() {}

func (x *CsgoPlayerPostMapStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerPostMapStatistics.ProtoReflect.Descriptor instead.
func (*CsgoPlayerPostMapStatistics) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{27}
}

func (x *CsgoPlayerPostMapStatistics) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CsgoPlayerPostMapStatistics) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetPlayerMapRole() CsgoPlayerRole {
	if x != nil {
		return x.PlayerMapRole
	}
	return CsgoPlayerRole_CSGO_PLAYER_ROLE_UNSPECIFIED
}

func (x *CsgoPlayerPostMapStatistics) GetKills() *PostMapStatisticsValues {
	if x != nil {
		return x.Kills
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetDeaths() *PostMapStatisticsValues {
	if x != nil {
		return x.Deaths
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetAssists() *PostMapStatisticsValues {
	if x != nil {
		return x.Assists
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetRoundsSurvived() *PostMapStatisticsValues {
	if x != nil {
		return x.RoundsSurvived
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetKillsOverDeaths() *PostMapStatisticsValues {
	if x != nil {
		return x.KillsOverDeaths
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetDamage() *PostMapStatisticsValues {
	if x != nil {
		return x.Damage
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetHeadshotRate() *PostMapStatisticsValues {
	if x != nil {
		return x.HeadshotRate
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetFlashAssists() *PostMapStatisticsValues {
	if x != nil {
		return x.FlashAssists
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetOpeningKills() *PostMapStatisticsValues {
	if x != nil {
		return x.OpeningKills
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetClutchRounds() *PostMapStatisticsValues {
	if x != nil {
		return x.ClutchRounds
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetUtilityDamage() *PostMapStatisticsValues {
	if x != nil {
		return x.UtilityDamage
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetGrenadesUsed() *PostMapStatisticsValues {
	if x != nil {
		return x.GrenadesUsed
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetEnemiesFlashed() *PostMapStatisticsValues {
	if x != nil {
		return x.EnemiesFlashed
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetAwpKills() *PostMapStatisticsValues {
	if x != nil {
		return x.AwpKills
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetLurkKills() *PostMapStatisticsValues {
	if x != nil {
		return x.LurkKills
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetKillsDifference() *PostMapStatisticsValues {
	if x != nil {
		return x.KillsDifference
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetKillCost() *PostMapStatisticsValues {
	if x != nil {
		return x.KillCost
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetAccuracyRate() *PostMapStatisticsValues {
	if x != nil {
		return x.AccuracyRate
	}
	return nil
}

func (x *CsgoPlayerPostMapStatistics) GetFavouriteWeapons() []*CsgoWeaponPostMapStatistics {
	if x != nil {
		return x.FavouriteWeapons
	}
	return nil
}

type CsgoRoundPostmap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round        int32            `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	Map          *Map             `protobuf:"bytes,2,opt,name=map,proto3" json:"map,omitempty"`
	CsgoMap      *CsgoMap         `protobuf:"bytes,3,opt,name=csgo_map,json=csgoMap,proto3" json:"csgo_map,omitempty"`
	WinnerTeam   *Team            `protobuf:"bytes,4,opt,name=winner_team,json=winnerTeam,proto3" json:"winner_team,omitempty"`
	WinnerSide   CsgoSide         `protobuf:"varint,5,opt,name=winner_side,json=winnerSide,proto3,enum=bragi.CsgoSide" json:"winner_side,omitempty"`
	RoundOutcome CsgoRoundOutcome `protobuf:"varint,6,opt,name=round_outcome,json=roundOutcome,proto3,enum=bragi.CsgoRoundOutcome" json:"round_outcome,omitempty"`
}

func (x *CsgoRoundPostmap) Reset() {
	*x = CsgoRoundPostmap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoRoundPostmap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoRoundPostmap) ProtoMessage() {}

func (x *CsgoRoundPostmap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoRoundPostmap.ProtoReflect.Descriptor instead.
func (*CsgoRoundPostmap) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{28}
}

func (x *CsgoRoundPostmap) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *CsgoRoundPostmap) GetMap() *Map {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *CsgoRoundPostmap) GetCsgoMap() *CsgoMap {
	if x != nil {
		return x.CsgoMap
	}
	return nil
}

func (x *CsgoRoundPostmap) GetWinnerTeam() *Team {
	if x != nil {
		return x.WinnerTeam
	}
	return nil
}

func (x *CsgoRoundPostmap) GetWinnerSide() CsgoSide {
	if x != nil {
		return x.WinnerSide
	}
	return CsgoSide_CSGO_SIDE_UNSPECIFIED
}

func (x *CsgoRoundPostmap) GetRoundOutcome() CsgoRoundOutcome {
	if x != nil {
		return x.RoundOutcome
	}
	return CsgoRoundOutcome_CSGO_ROUND_OUTCOME_UNSPECIFIED
}

type CsgoMapStatisticsAccordingSide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map        *CsgoMap                  `protobuf:"bytes,1,opt,name=map,proto3" json:"map,omitempty"`
	Statistics *CsgoStatisticsSideValues `protobuf:"bytes,2,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *CsgoMapStatisticsAccordingSide) Reset() {
	*x = CsgoMapStatisticsAccordingSide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoMapStatisticsAccordingSide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoMapStatisticsAccordingSide) ProtoMessage() {}

func (x *CsgoMapStatisticsAccordingSide) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoMapStatisticsAccordingSide.ProtoReflect.Descriptor instead.
func (*CsgoMapStatisticsAccordingSide) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{29}
}

func (x *CsgoMapStatisticsAccordingSide) GetMap() *CsgoMap {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *CsgoMapStatisticsAccordingSide) GetStatistics() *CsgoStatisticsSideValues {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type CsgoTournamentMapStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map                               *CsgoMap                            `protobuf:"bytes,1,opt,name=map,proto3" json:"map,omitempty"`
	Picks                             int32                               `protobuf:"varint,2,opt,name=picks,proto3" json:"picks,omitempty"`
	Bans                              int32                               `protobuf:"varint,3,opt,name=bans,proto3" json:"bans,omitempty"`
	TerroristsWinrateInPercent        *float32                            `protobuf:"fixed32,4,opt,name=terrorists_winrate_in_percent,json=terroristsWinrateInPercent,proto3,oneof" json:"terrorists_winrate_in_percent,omitempty"`
	CounterTerroristsWinrateInPercent *float32                            `protobuf:"fixed32,5,opt,name=counter_terrorists_winrate_in_percent,json=counterTerroristsWinrateInPercent,proto3,oneof" json:"counter_terrorists_winrate_in_percent,omitempty"`
	BestTeams                         *CsgoTournamentBestTeamStatistics   `protobuf:"bytes,6,opt,name=best_teams,json=bestTeams,proto3" json:"best_teams,omitempty"`
	BestPlayers                       *CsgoTournamentBestPlayerStatistics `protobuf:"bytes,7,opt,name=best_players,json=bestPlayers,proto3" json:"best_players,omitempty"`
}

func (x *CsgoTournamentMapStatistics) Reset() {
	*x = CsgoTournamentMapStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTournamentMapStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTournamentMapStatistics) ProtoMessage() {}

func (x *CsgoTournamentMapStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTournamentMapStatistics.ProtoReflect.Descriptor instead.
func (*CsgoTournamentMapStatistics) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{30}
}

func (x *CsgoTournamentMapStatistics) GetMap() *CsgoMap {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *CsgoTournamentMapStatistics) GetPicks() int32 {
	if x != nil {
		return x.Picks
	}
	return 0
}

func (x *CsgoTournamentMapStatistics) GetBans() int32 {
	if x != nil {
		return x.Bans
	}
	return 0
}

func (x *CsgoTournamentMapStatistics) GetTerroristsWinrateInPercent() float32 {
	if x != nil && x.TerroristsWinrateInPercent != nil {
		return *x.TerroristsWinrateInPercent
	}
	return 0
}

func (x *CsgoTournamentMapStatistics) GetCounterTerroristsWinrateInPercent() float32 {
	if x != nil && x.CounterTerroristsWinrateInPercent != nil {
		return *x.CounterTerroristsWinrateInPercent
	}
	return 0
}

func (x *CsgoTournamentMapStatistics) GetBestTeams() *CsgoTournamentBestTeamStatistics {
	if x != nil {
		return x.BestTeams
	}
	return nil
}

func (x *CsgoTournamentMapStatistics) GetBestPlayers() *CsgoTournamentBestPlayerStatistics {
	if x != nil {
		return x.BestPlayers
	}
	return nil
}

type CsgoTournamentPlayerStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player *Player `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	Team   *Team   `protobuf:"bytes,2,opt,name=team,proto3,oneof" json:"team,omitempty"`
	Value  float32 `protobuf:"fixed32,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CsgoTournamentPlayerStatistics) Reset() {
	*x = CsgoTournamentPlayerStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTournamentPlayerStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTournamentPlayerStatistics) ProtoMessage() {}

func (x *CsgoTournamentPlayerStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTournamentPlayerStatistics.ProtoReflect.Descriptor instead.
func (*CsgoTournamentPlayerStatistics) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{31}
}

func (x *CsgoTournamentPlayerStatistics) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *CsgoTournamentPlayerStatistics) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *CsgoTournamentPlayerStatistics) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type CsgoTournamentBestTeamStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighestKills           *TournamentTeamStatisticsValue          `protobuf:"bytes,1,opt,name=highest_kills,json=highestKills,proto3" json:"highest_kills,omitempty"`
	HighestKillsOverDeaths *TournamentTeamStatisticsValue          `protobuf:"bytes,2,opt,name=highest_kills_over_deaths,json=highestKillsOverDeaths,proto3" json:"highest_kills_over_deaths,omitempty"`
	HighestAwpKills        *TournamentTeamStatisticsValue          `protobuf:"bytes,3,opt,name=highest_awp_kills,json=highestAwpKills,proto3" json:"highest_awp_kills,omitempty"`
	HighestPlantRate       *TournamentTeamStatisticsValueInPercent `protobuf:"bytes,4,opt,name=highest_plant_rate,json=highestPlantRate,proto3" json:"highest_plant_rate,omitempty"`
	HighestDefuseRate      *TournamentTeamStatisticsValueInPercent `protobuf:"bytes,5,opt,name=highest_defuse_rate,json=highestDefuseRate,proto3" json:"highest_defuse_rate,omitempty"`
}

func (x *CsgoTournamentBestTeamStatistics) Reset() {
	*x = CsgoTournamentBestTeamStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTournamentBestTeamStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTournamentBestTeamStatistics) ProtoMessage() {}

func (x *CsgoTournamentBestTeamStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTournamentBestTeamStatistics.ProtoReflect.Descriptor instead.
func (*CsgoTournamentBestTeamStatistics) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{32}
}

func (x *CsgoTournamentBestTeamStatistics) GetHighestKills() *TournamentTeamStatisticsValue {
	if x != nil {
		return x.HighestKills
	}
	return nil
}

func (x *CsgoTournamentBestTeamStatistics) GetHighestKillsOverDeaths() *TournamentTeamStatisticsValue {
	if x != nil {
		return x.HighestKillsOverDeaths
	}
	return nil
}

func (x *CsgoTournamentBestTeamStatistics) GetHighestAwpKills() *TournamentTeamStatisticsValue {
	if x != nil {
		return x.HighestAwpKills
	}
	return nil
}

func (x *CsgoTournamentBestTeamStatistics) GetHighestPlantRate() *TournamentTeamStatisticsValueInPercent {
	if x != nil {
		return x.HighestPlantRate
	}
	return nil
}

func (x *CsgoTournamentBestTeamStatistics) GetHighestDefuseRate() *TournamentTeamStatisticsValueInPercent {
	if x != nil {
		return x.HighestDefuseRate
	}
	return nil
}

type CsgoTournamentBestPlayerStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighestKills           *CsgoTournamentPlayerStatistics `protobuf:"bytes,1,opt,name=highest_kills,json=highestKills,proto3" json:"highest_kills,omitempty"`
	HighestKillsOverDeaths *CsgoTournamentPlayerStatistics `protobuf:"bytes,2,opt,name=highest_kills_over_deaths,json=highestKillsOverDeaths,proto3" json:"highest_kills_over_deaths,omitempty"`
	HighestDamage          *CsgoTournamentPlayerStatistics `protobuf:"bytes,3,opt,name=highest_damage,json=highestDamage,proto3" json:"highest_damage,omitempty"`
	HighestFlashAssists    *CsgoTournamentPlayerStatistics `protobuf:"bytes,4,opt,name=highest_flash_assists,json=highestFlashAssists,proto3" json:"highest_flash_assists,omitempty"`
	HighestUtilityDamage   *CsgoTournamentPlayerStatistics `protobuf:"bytes,5,opt,name=highest_utility_damage,json=highestUtilityDamage,proto3" json:"highest_utility_damage,omitempty"`
	HighestOpeningKills    *CsgoTournamentPlayerStatistics `protobuf:"bytes,6,opt,name=highest_opening_kills,json=highestOpeningKills,proto3" json:"highest_opening_kills,omitempty"`
}

func (x *CsgoTournamentBestPlayerStatistics) Reset() {
	*x = CsgoTournamentBestPlayerStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTournamentBestPlayerStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTournamentBestPlayerStatistics) ProtoMessage() {}

func (x *CsgoTournamentBestPlayerStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTournamentBestPlayerStatistics.ProtoReflect.Descriptor instead.
func (*CsgoTournamentBestPlayerStatistics) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{33}
}

func (x *CsgoTournamentBestPlayerStatistics) GetHighestKills() *CsgoTournamentPlayerStatistics {
	if x != nil {
		return x.HighestKills
	}
	return nil
}

func (x *CsgoTournamentBestPlayerStatistics) GetHighestKillsOverDeaths() *CsgoTournamentPlayerStatistics {
	if x != nil {
		return x.HighestKillsOverDeaths
	}
	return nil
}

func (x *CsgoTournamentBestPlayerStatistics) GetHighestDamage() *CsgoTournamentPlayerStatistics {
	if x != nil {
		return x.HighestDamage
	}
	return nil
}

func (x *CsgoTournamentBestPlayerStatistics) GetHighestFlashAssists() *CsgoTournamentPlayerStatistics {
	if x != nil {
		return x.HighestFlashAssists
	}
	return nil
}

func (x *CsgoTournamentBestPlayerStatistics) GetHighestUtilityDamage() *CsgoTournamentPlayerStatistics {
	if x != nil {
		return x.HighestUtilityDamage
	}
	return nil
}

func (x *CsgoTournamentBestPlayerStatistics) GetHighestOpeningKills() *CsgoTournamentPlayerStatistics {
	if x != nil {
		return x.HighestOpeningKills
	}
	return nil
}

type CsgoTeamStandingRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round         int32  `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	TeamScore     *int32 `protobuf:"varint,2,opt,name=team_score,json=teamScore,proto3,oneof" json:"team_score,omitempty"`
	Opponent      *Team  `protobuf:"bytes,3,opt,name=opponent,proto3,oneof" json:"opponent,omitempty"`
	OpponentScore *int32 `protobuf:"varint,4,opt,name=opponent_score,json=opponentScore,proto3,oneof" json:"opponent_score,omitempty"`
	MatchIsClosed bool   `protobuf:"varint,5,opt,name=match_is_closed,json=matchIsClosed,proto3" json:"match_is_closed,omitempty"`
}

func (x *CsgoTeamStandingRound) Reset() {
	*x = CsgoTeamStandingRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTeamStandingRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTeamStandingRound) ProtoMessage() {}

func (x *CsgoTeamStandingRound) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTeamStandingRound.ProtoReflect.Descriptor instead.
func (*CsgoTeamStandingRound) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{34}
}

func (x *CsgoTeamStandingRound) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *CsgoTeamStandingRound) GetTeamScore() int32 {
	if x != nil && x.TeamScore != nil {
		return *x.TeamScore
	}
	return 0
}

func (x *CsgoTeamStandingRound) GetOpponent() *Team {
	if x != nil {
		return x.Opponent
	}
	return nil
}

func (x *CsgoTeamStandingRound) GetOpponentScore() int32 {
	if x != nil && x.OpponentScore != nil {
		return *x.OpponentScore
	}
	return 0
}

func (x *CsgoTeamStandingRound) GetMatchIsClosed() bool {
	if x != nil {
		return x.MatchIsClosed
	}
	return false
}

type CsgoPlayersDuel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomePlayer      *CsgoPlayer `protobuf:"bytes,1,opt,name=home_player,json=homePlayer,proto3" json:"home_player,omitempty"`
	HomePlayerKills int32       `protobuf:"varint,2,opt,name=home_player_kills,json=homePlayerKills,proto3" json:"home_player_kills,omitempty"`
	AwayPlayer      *CsgoPlayer `protobuf:"bytes,3,opt,name=away_player,json=awayPlayer,proto3" json:"away_player,omitempty"`
	AwayPlayerKills int32       `protobuf:"varint,4,opt,name=away_player_kills,json=awayPlayerKills,proto3" json:"away_player_kills,omitempty"`
}

func (x *CsgoPlayersDuel) Reset() {
	*x = CsgoPlayersDuel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayersDuel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayersDuel) ProtoMessage() {}

func (x *CsgoPlayersDuel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayersDuel.ProtoReflect.Descriptor instead.
func (*CsgoPlayersDuel) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{35}
}

func (x *CsgoPlayersDuel) GetHomePlayer() *CsgoPlayer {
	if x != nil {
		return x.HomePlayer
	}
	return nil
}

func (x *CsgoPlayersDuel) GetHomePlayerKills() int32 {
	if x != nil {
		return x.HomePlayerKills
	}
	return 0
}

func (x *CsgoPlayersDuel) GetAwayPlayer() *CsgoPlayer {
	if x != nil {
		return x.AwayPlayer
	}
	return nil
}

func (x *CsgoPlayersDuel) GetAwayPlayerKills() int32 {
	if x != nil {
		return x.AwayPlayerKills
	}
	return 0
}

type CsgoStatisticsSideValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terrorists        *StatisticsValues `protobuf:"bytes,1,opt,name=terrorists,proto3" json:"terrorists,omitempty"`
	CounterTerrorists *StatisticsValues `protobuf:"bytes,2,opt,name=counter_terrorists,json=counterTerrorists,proto3" json:"counter_terrorists,omitempty"`
	All               *StatisticsValues `protobuf:"bytes,3,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *CsgoStatisticsSideValues) Reset() {
	*x = CsgoStatisticsSideValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoStatisticsSideValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoStatisticsSideValues) ProtoMessage() {}

func (x *CsgoStatisticsSideValues) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoStatisticsSideValues.ProtoReflect.Descriptor instead.
func (*CsgoStatisticsSideValues) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{36}
}

func (x *CsgoStatisticsSideValues) GetTerrorists() *StatisticsValues {
	if x != nil {
		return x.Terrorists
	}
	return nil
}

func (x *CsgoStatisticsSideValues) GetCounterTerrorists() *StatisticsValues {
	if x != nil {
		return x.CounterTerrorists
	}
	return nil
}

func (x *CsgoStatisticsSideValues) GetAll() *StatisticsValues {
	if x != nil {
		return x.All
	}
	return nil
}

type CsgoWeaponStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weapon              *CsgoWeapon       `protobuf:"bytes,1,opt,name=weapon,proto3" json:"weapon,omitempty"`
	KillsWithWeapon     *StatisticsValues `protobuf:"bytes,2,opt,name=kills_with_weapon,json=killsWithWeapon,proto3" json:"kills_with_weapon,omitempty"`
	HeadshotsWithWeapon *StatisticsValues `protobuf:"bytes,3,opt,name=headshots_with_weapon,json=headshotsWithWeapon,proto3" json:"headshots_with_weapon,omitempty"`
}

func (x *CsgoWeaponStatistics) Reset() {
	*x = CsgoWeaponStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoWeaponStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoWeaponStatistics) ProtoMessage() {}

func (x *CsgoWeaponStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoWeaponStatistics.ProtoReflect.Descriptor instead.
func (*CsgoWeaponStatistics) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{37}
}

func (x *CsgoWeaponStatistics) GetWeapon() *CsgoWeapon {
	if x != nil {
		return x.Weapon
	}
	return nil
}

func (x *CsgoWeaponStatistics) GetKillsWithWeapon() *StatisticsValues {
	if x != nil {
		return x.KillsWithWeapon
	}
	return nil
}

func (x *CsgoWeaponStatistics) GetHeadshotsWithWeapon() *StatisticsValues {
	if x != nil {
		return x.HeadshotsWithWeapon
	}
	return nil
}

type CsgoWeaponPostMapStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weapon              *CsgoWeapon `protobuf:"bytes,1,opt,name=weapon,proto3" json:"weapon,omitempty"`
	KillsWithWeapon     int32       `protobuf:"varint,2,opt,name=kills_with_weapon,json=killsWithWeapon,proto3" json:"kills_with_weapon,omitempty"`
	HeadshotsWithWeapon int32       `protobuf:"varint,3,opt,name=headshots_with_weapon,json=headshotsWithWeapon,proto3" json:"headshots_with_weapon,omitempty"`
}

func (x *CsgoWeaponPostMapStatistics) Reset() {
	*x = CsgoWeaponPostMapStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoWeaponPostMapStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoWeaponPostMapStatistics) ProtoMessage() {}

func (x *CsgoWeaponPostMapStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoWeaponPostMapStatistics.ProtoReflect.Descriptor instead.
func (*CsgoWeaponPostMapStatistics) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{38}
}

func (x *CsgoWeaponPostMapStatistics) GetWeapon() *CsgoWeapon {
	if x != nil {
		return x.Weapon
	}
	return nil
}

func (x *CsgoWeaponPostMapStatistics) GetKillsWithWeapon() int32 {
	if x != nil {
		return x.KillsWithWeapon
	}
	return 0
}

func (x *CsgoWeaponPostMapStatistics) GetHeadshotsWithWeapon() int32 {
	if x != nil {
		return x.HeadshotsWithWeapon
	}
	return 0
}

type CsgoMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IconPath *string `protobuf:"bytes,3,opt,name=icon_path,json=iconPath,proto3,oneof" json:"icon_path,omitempty"`
}

func (x *CsgoMap) Reset() {
	*x = CsgoMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoMap) ProtoMessage() {}

func (x *CsgoMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoMap.ProtoReflect.Descriptor instead.
func (*CsgoMap) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{39}
}

func (x *CsgoMap) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CsgoMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CsgoMap) GetIconPath() string {
	if x != nil && x.IconPath != nil {
		return *x.IconPath
	}
	return ""
}

type CsgoMapVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Picked []*CsgoMapStatistics `protobuf:"bytes,1,rep,name=picked,proto3" json:"picked,omitempty"`
	Banned []*CsgoMapStatistics `protobuf:"bytes,2,rep,name=banned,proto3" json:"banned,omitempty"`
}

func (x *CsgoMapVote) Reset() {
	*x = CsgoMapVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoMapVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoMapVote) ProtoMessage() {}

func (x *CsgoMapVote) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoMapVote.ProtoReflect.Descriptor instead.
func (*CsgoMapVote) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{40}
}

func (x *CsgoMapVote) GetPicked() []*CsgoMapStatistics {
	if x != nil {
		return x.Picked
	}
	return nil
}

func (x *CsgoMapVote) GetBanned() []*CsgoMapStatistics {
	if x != nil {
		return x.Banned
	}
	return nil
}

type CsgoMapStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map        *CsgoMap          `protobuf:"bytes,1,opt,name=map,proto3" json:"map,omitempty"`
	Statistics *StatisticsValues `protobuf:"bytes,2,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *CsgoMapStatistics) Reset() {
	*x = CsgoMapStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoMapStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoMapStatistics) ProtoMessage() {}

func (x *CsgoMapStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoMapStatistics.ProtoReflect.Descriptor instead.
func (*CsgoMapStatistics) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{41}
}

func (x *CsgoMapStatistics) GetMap() *CsgoMap {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *CsgoMapStatistics) GetStatistics() *StatisticsValues {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type CsgoWeapon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IconPath *string `protobuf:"bytes,3,opt,name=icon_path,json=iconPath,proto3,oneof" json:"icon_path,omitempty"`
}

func (x *CsgoWeapon) Reset() {
	*x = CsgoWeapon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoWeapon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoWeapon) ProtoMessage() {}

func (x *CsgoWeapon) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoWeapon.ProtoReflect.Descriptor instead.
func (*CsgoWeapon) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{42}
}

func (x *CsgoWeapon) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CsgoWeapon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CsgoWeapon) GetIconPath() string {
	if x != nil && x.IconPath != nil {
		return *x.IconPath
	}
	return ""
}

type CsgoTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Team    *Team     `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
	Players []*Player `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *CsgoTeam) Reset() {
	*x = CsgoTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTeam) ProtoMessage() {}

func (x *CsgoTeam) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTeam.ProtoReflect.Descriptor instead.
func (*CsgoTeam) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{43}
}

func (x *CsgoTeam) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CsgoTeam) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *CsgoTeam) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CsgoPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Nickname string         `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	RealName *string        `protobuf:"bytes,3,opt,name=real_name,json=realName,proto3,oneof" json:"real_name,omitempty"`
	Shortcut *string        `protobuf:"bytes,4,opt,name=shortcut,proto3,oneof" json:"shortcut,omitempty"`
	IconPath *string        `protobuf:"bytes,5,opt,name=icon_path,json=iconPath,proto3,oneof" json:"icon_path,omitempty"`
	Role     CsgoPlayerRole `protobuf:"varint,6,opt,name=role,proto3,enum=bragi.CsgoPlayerRole" json:"role,omitempty"`
}

func (x *CsgoPlayer) Reset() {
	*x = CsgoPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayer) ProtoMessage() {}

func (x *CsgoPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayer.ProtoReflect.Descriptor instead.
func (*CsgoPlayer) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{44}
}

func (x *CsgoPlayer) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CsgoPlayer) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CsgoPlayer) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *CsgoPlayer) GetShortcut() string {
	if x != nil && x.Shortcut != nil {
		return *x.Shortcut
	}
	return ""
}

func (x *CsgoPlayer) GetIconPath() string {
	if x != nil && x.IconPath != nil {
		return *x.IconPath
	}
	return ""
}

func (x *CsgoPlayer) GetRole() CsgoPlayerRole {
	if x != nil {
		return x.Role
	}
	return CsgoPlayerRole_CSGO_PLAYER_ROLE_UNSPECIFIED
}

type CsgoTournamentBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneofName:
	//	*CsgoTournamentBlock_CsgoTournamentStandingsBlock
	//	*CsgoTournamentBlock_CsgoTournamentBracketsBlock
	OneofName isCsgoTournamentBlock_OneofName `protobuf_oneof:"oneof_name"`
}

func (x *CsgoTournamentBlock) Reset() {
	*x = CsgoTournamentBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTournamentBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTournamentBlock) ProtoMessage() {}

func (x *CsgoTournamentBlock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTournamentBlock.ProtoReflect.Descriptor instead.
func (*CsgoTournamentBlock) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{45}
}

func (m *CsgoTournamentBlock) GetOneofName() isCsgoTournamentBlock_OneofName {
	if m != nil {
		return m.OneofName
	}
	return nil
}

func (x *CsgoTournamentBlock) GetCsgoTournamentStandingsBlock() *CsgoTournamentStandingsBlock {
	if x, ok := x.GetOneofName().(*CsgoTournamentBlock_CsgoTournamentStandingsBlock); ok {
		return x.CsgoTournamentStandingsBlock
	}
	return nil
}

func (x *CsgoTournamentBlock) GetCsgoTournamentBracketsBlock() *CsgoTournamentBracketsBlock {
	if x, ok := x.GetOneofName().(*CsgoTournamentBlock_CsgoTournamentBracketsBlock); ok {
		return x.CsgoTournamentBracketsBlock
	}
	return nil
}

type isCsgoTournamentBlock_OneofName interface {
	isCsgoTournamentBlock_OneofName()
}

type CsgoTournamentBlock_CsgoTournamentStandingsBlock struct {
	CsgoTournamentStandingsBlock *CsgoTournamentStandingsBlock `protobuf:"bytes,1,opt,name=csgo_tournament_standings_block,json=csgoTournamentStandingsBlock,proto3,oneof"`
}

type CsgoTournamentBlock_CsgoTournamentBracketsBlock struct {
	CsgoTournamentBracketsBlock *CsgoTournamentBracketsBlock `protobuf:"bytes,2,opt,name=csgo_tournament_brackets_block,json=csgoTournamentBracketsBlock,proto3,oneof"`
}

func (*CsgoTournamentBlock_CsgoTournamentStandingsBlock) isCsgoTournamentBlock_OneofName() {}

func (*CsgoTournamentBlock_CsgoTournamentBracketsBlock) isCsgoTournamentBlock_OneofName() {}

type CsgoTournamentStandingsBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Order     int32               `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	Standings []*CsgoTeamStanding `protobuf:"bytes,4,rep,name=standings,proto3" json:"standings,omitempty"`
}

func (x *CsgoTournamentStandingsBlock) Reset() {
	*x = CsgoTournamentStandingsBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTournamentStandingsBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTournamentStandingsBlock) ProtoMessage() {}

func (x *CsgoTournamentStandingsBlock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTournamentStandingsBlock.ProtoReflect.Descriptor instead.
func (*CsgoTournamentStandingsBlock) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{46}
}

func (x *CsgoTournamentStandingsBlock) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CsgoTournamentStandingsBlock) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CsgoTournamentStandingsBlock) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *CsgoTournamentStandingsBlock) GetStandings() []*CsgoTeamStanding {
	if x != nil {
		return x.Standings
	}
	return nil
}

type CsgoTournamentBracketsBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Order    int32                    `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	Brackets []*TournamentBracketNode `protobuf:"bytes,4,rep,name=brackets,proto3" json:"brackets,omitempty"`
}

func (x *CsgoTournamentBracketsBlock) Reset() {
	*x = CsgoTournamentBracketsBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTournamentBracketsBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTournamentBracketsBlock) ProtoMessage() {}

func (x *CsgoTournamentBracketsBlock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTournamentBracketsBlock.ProtoReflect.Descriptor instead.
func (*CsgoTournamentBracketsBlock) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{47}
}

func (x *CsgoTournamentBracketsBlock) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CsgoTournamentBracketsBlock) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CsgoTournamentBracketsBlock) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *CsgoTournamentBracketsBlock) GetBrackets() []*TournamentBracketNode {
	if x != nil {
		return x.Brackets
	}
	return nil
}

type CsgoTeamStanding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Rank            int32                    `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Team            *Team                    `protobuf:"bytes,3,opt,name=team,proto3" json:"team,omitempty"`
	Points          int32                    `protobuf:"varint,4,opt,name=points,proto3" json:"points,omitempty"`
	MatchesWon      int32                    `protobuf:"varint,5,opt,name=matches_won,json=matchesWon,proto3" json:"matches_won,omitempty"`
	MatchesLost     int32                    `protobuf:"varint,6,opt,name=matches_lost,json=matchesLost,proto3" json:"matches_lost,omitempty"`
	MatchesDrawn    int32                    `protobuf:"varint,7,opt,name=matches_drawn,json=matchesDrawn,proto3" json:"matches_drawn,omitempty"`
	MapsWon         int32                    `protobuf:"varint,8,opt,name=maps_won,json=mapsWon,proto3" json:"maps_won,omitempty"`
	MapsLost        int32                    `protobuf:"varint,9,opt,name=maps_lost,json=mapsLost,proto3" json:"maps_lost,omitempty"`
	MapsDrawn       int32                    `protobuf:"varint,10,opt,name=maps_drawn,json=mapsDrawn,proto3" json:"maps_drawn,omitempty"`
	RoundsWon       int32                    `protobuf:"varint,11,opt,name=rounds_won,json=roundsWon,proto3" json:"rounds_won,omitempty"`
	RoundsLost      int32                    `protobuf:"varint,12,opt,name=rounds_lost,json=roundsLost,proto3" json:"rounds_lost,omitempty"`
	MapDifference   int32                    `protobuf:"varint,13,opt,name=map_difference,json=mapDifference,proto3" json:"map_difference,omitempty"`
	RoundDifference int32                    `protobuf:"varint,14,opt,name=round_difference,json=roundDifference,proto3" json:"round_difference,omitempty"`
	Status          *string                  `protobuf:"bytes,15,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Rounds          []*CsgoTeamStandingRound `protobuf:"bytes,16,rep,name=rounds,proto3" json:"rounds,omitempty"`
}

func (x *CsgoTeamStanding) Reset() {
	*x = CsgoTeamStanding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTeamStanding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTeamStanding) ProtoMessage() {}

func (x *CsgoTeamStanding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTeamStanding.ProtoReflect.Descriptor instead.
func (*CsgoTeamStanding) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{48}
}

func (x *CsgoTeamStanding) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CsgoTeamStanding) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *CsgoTeamStanding) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *CsgoTeamStanding) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *CsgoTeamStanding) GetMatchesWon() int32 {
	if x != nil {
		return x.MatchesWon
	}
	return 0
}

func (x *CsgoTeamStanding) GetMatchesLost() int32 {
	if x != nil {
		return x.MatchesLost
	}
	return 0
}

func (x *CsgoTeamStanding) GetMatchesDrawn() int32 {
	if x != nil {
		return x.MatchesDrawn
	}
	return 0
}

func (x *CsgoTeamStanding) GetMapsWon() int32 {
	if x != nil {
		return x.MapsWon
	}
	return 0
}

func (x *CsgoTeamStanding) GetMapsLost() int32 {
	if x != nil {
		return x.MapsLost
	}
	return 0
}

func (x *CsgoTeamStanding) GetMapsDrawn() int32 {
	if x != nil {
		return x.MapsDrawn
	}
	return 0
}

func (x *CsgoTeamStanding) GetRoundsWon() int32 {
	if x != nil {
		return x.RoundsWon
	}
	return 0
}

func (x *CsgoTeamStanding) GetRoundsLost() int32 {
	if x != nil {
		return x.RoundsLost
	}
	return 0
}

func (x *CsgoTeamStanding) GetMapDifference() int32 {
	if x != nil {
		return x.MapDifference
	}
	return 0
}

func (x *CsgoTeamStanding) GetRoundDifference() int32 {
	if x != nil {
		return x.RoundDifference
	}
	return 0
}

func (x *CsgoTeamStanding) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *CsgoTeamStanding) GetRounds() []*CsgoTeamStandingRound {
	if x != nil {
		return x.Rounds
	}
	return nil
}

type TournamentBracketNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	HomeTeam   *Team    `protobuf:"bytes,2,opt,name=home_team,json=homeTeam,proto3,oneof" json:"home_team,omitempty"`
	HomeScore  *int32   `protobuf:"varint,3,opt,name=home_score,json=homeScore,proto3,oneof" json:"home_score,omitempty"`
	AwayTeam   *Team    `protobuf:"bytes,4,opt,name=away_team,json=awayTeam,proto3,oneof" json:"away_team,omitempty"`
	AwayScore  *int32   `protobuf:"varint,5,opt,name=away_score,json=awayScore,proto3,oneof" json:"away_score,omitempty"`
	Match      *Match   `protobuf:"bytes,6,opt,name=match,proto3,oneof" json:"match,omitempty"`
	Label      *string  `protobuf:"bytes,7,opt,name=label,proto3,oneof" json:"label,omitempty"`
	IsRoot     bool     `protobuf:"varint,8,opt,name=is_root,json=isRoot,proto3" json:"is_root,omitempty"`
	ChildNodes []uint32 `protobuf:"varint,9,rep,packed,name=child_nodes,json=childNodes,proto3" json:"child_nodes,omitempty"`
}

func (x *TournamentBracketNode) Reset() {
	*x = TournamentBracketNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentBracketNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentBracketNode) ProtoMessage() {}

func (x *TournamentBracketNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentBracketNode.ProtoReflect.Descriptor instead.
func (*TournamentBracketNode) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{49}
}

func (x *TournamentBracketNode) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TournamentBracketNode) GetHomeTeam() *Team {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *TournamentBracketNode) GetHomeScore() int32 {
	if x != nil && x.HomeScore != nil {
		return *x.HomeScore
	}
	return 0
}

func (x *TournamentBracketNode) GetAwayTeam() *Team {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

func (x *TournamentBracketNode) GetAwayScore() int32 {
	if x != nil && x.AwayScore != nil {
		return *x.AwayScore
	}
	return 0
}

func (x *TournamentBracketNode) GetMatch() *Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *TournamentBracketNode) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *TournamentBracketNode) GetIsRoot() bool {
	if x != nil {
		return x.IsRoot
	}
	return false
}

func (x *TournamentBracketNode) GetChildNodes() []uint32 {
	if x != nil {
		return x.ChildNodes
	}
	return nil
}

type Csgo2DMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayersPositions []*Csgo2DMapPlayerPosition `protobuf:"bytes,1,rep,name=players_positions,json=playersPositions,proto3" json:"players_positions,omitempty"`
	BombPositions    *Csgo2DMapBombPosition     `protobuf:"bytes,2,opt,name=bomb_positions,json=bombPositions,proto3" json:"bomb_positions,omitempty"`
	Round            *CsgoRound                 `protobuf:"bytes,3,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *Csgo2DMap) Reset() {
	*x = Csgo2DMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Csgo2DMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Csgo2DMap) ProtoMessage() {}

func (x *Csgo2DMap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Csgo2DMap.ProtoReflect.Descriptor instead.
func (*Csgo2DMap) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{50}
}

func (x *Csgo2DMap) GetPlayersPositions() []*Csgo2DMapPlayerPosition {
	if x != nil {
		return x.PlayersPositions
	}
	return nil
}

func (x *Csgo2DMap) GetBombPositions() *Csgo2DMapBombPosition {
	if x != nil {
		return x.BombPositions
	}
	return nil
}

func (x *Csgo2DMap) GetRound() *CsgoRound {
	if x != nil {
		return x.Round
	}
	return nil
}

type Csgo2DMapPlayerPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player   *Player        `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	Side     CsgoSide       `protobuf:"varint,2,opt,name=side,proto3,enum=bragi.CsgoSide" json:"side,omitempty"`
	Position *Map2DPosition `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Forward  *Map2DPosition `protobuf:"bytes,4,opt,name=forward,proto3" json:"forward,omitempty"`
	State    string         `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Csgo2DMapPlayerPosition) Reset() {
	*x = Csgo2DMapPlayerPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Csgo2DMapPlayerPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Csgo2DMapPlayerPosition) ProtoMessage() {}

func (x *Csgo2DMapPlayerPosition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Csgo2DMapPlayerPosition.ProtoReflect.Descriptor instead.
func (*Csgo2DMapPlayerPosition) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{51}
}

func (x *Csgo2DMapPlayerPosition) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *Csgo2DMapPlayerPosition) GetSide() CsgoSide {
	if x != nil {
		return x.Side
	}
	return CsgoSide_CSGO_SIDE_UNSPECIFIED
}

func (x *Csgo2DMapPlayerPosition) GetPosition() *Map2DPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Csgo2DMapPlayerPosition) GetForward() *Map2DPosition {
	if x != nil {
		return x.Forward
	}
	return nil
}

func (x *Csgo2DMapPlayerPosition) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type Csgo2DMapBombPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position       *Map2DPosition `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	State          string         `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	TimeToDefused  uint32         `protobuf:"varint,3,opt,name=time_to_defused,json=timeToDefused,proto3" json:"time_to_defused,omitempty"`
	TimeToExploded uint32         `protobuf:"varint,4,opt,name=time_to_exploded,json=timeToExploded,proto3" json:"time_to_exploded,omitempty"`
}

func (x *Csgo2DMapBombPosition) Reset() {
	*x = Csgo2DMapBombPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Csgo2DMapBombPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Csgo2DMapBombPosition) ProtoMessage() {}

func (x *Csgo2DMapBombPosition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Csgo2DMapBombPosition.ProtoReflect.Descriptor instead.
func (*Csgo2DMapBombPosition) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{52}
}

func (x *Csgo2DMapBombPosition) GetPosition() *Map2DPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Csgo2DMapBombPosition) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Csgo2DMapBombPosition) GetTimeToDefused() uint32 {
	if x != nil {
		return x.TimeToDefused
	}
	return 0
}

func (x *Csgo2DMapBombPosition) GetTimeToExploded() uint32 {
	if x != nil {
		return x.TimeToExploded
	}
	return 0
}

type Map2DPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Map2DPosition) Reset() {
	*x = Map2DPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map2DPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map2DPosition) ProtoMessage() {}

func (x *Map2DPosition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map2DPosition.ProtoReflect.Descriptor instead.
func (*Map2DPosition) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{53}
}

func (x *Map2DPosition) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Map2DPosition) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type CsgoRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number        uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	State         string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	TimeRemaining uint32 `protobuf:"varint,3,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
}

func (x *CsgoRound) Reset() {
	*x = CsgoRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoRound) ProtoMessage() {}

func (x *CsgoRound) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoRound.ProtoReflect.Descriptor instead.
func (*CsgoRound) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{54}
}

func (x *CsgoRound) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *CsgoRound) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CsgoRound) GetTimeRemaining() uint32 {
	if x != nil {
		return x.TimeRemaining
	}
	return 0
}

type CsgoScoreBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map          *CsgoMap          `protobuf:"bytes,1,opt,name=map,proto3" json:"map,omitempty"`
	Round        uint32            `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	RoundOutcome *CsgoRoundOutcome `protobuf:"varint,3,opt,name=round_outcome,json=roundOutcome,proto3,enum=bragi.CsgoRoundOutcome,oneof" json:"round_outcome,omitempty"`
}

func (x *CsgoScoreBoard) Reset() {
	*x = CsgoScoreBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoScoreBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoScoreBoard) ProtoMessage() {}

func (x *CsgoScoreBoard) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoScoreBoard.ProtoReflect.Descriptor instead.
func (*CsgoScoreBoard) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{55}
}

func (x *CsgoScoreBoard) GetMap() *CsgoMap {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *CsgoScoreBoard) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *CsgoScoreBoard) GetRoundOutcome() CsgoRoundOutcome {
	if x != nil && x.RoundOutcome != nil {
		return *x.RoundOutcome
	}
	return CsgoRoundOutcome_CSGO_ROUND_OUTCOME_UNSPECIFIED
}

type CsgoTeamScoreBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team           *Team                   `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	ScoreMaps      uint32                  `protobuf:"varint,2,opt,name=score_maps,json=scoreMaps,proto3" json:"score_maps,omitempty"`
	ScoreRounds    uint32                  `protobuf:"varint,3,opt,name=score_rounds,json=scoreRounds,proto3" json:"score_rounds,omitempty"`
	Side           CsgoSide                `protobuf:"varint,4,opt,name=side,proto3,enum=bragi.CsgoSide" json:"side,omitempty"`
	EquipmentValue uint32                  `protobuf:"varint,5,opt,name=equipment_value,json=equipmentValue,proto3" json:"equipment_value,omitempty"`
	Balance        int32                   `protobuf:"varint,6,opt,name=balance,proto3" json:"balance,omitempty"`
	Frag           uint32                  `protobuf:"varint,7,opt,name=frag,proto3" json:"frag,omitempty"`
	Flashbang      uint32                  `protobuf:"varint,8,opt,name=flashbang,proto3" json:"flashbang,omitempty"`
	Firebomb       uint32                  `protobuf:"varint,9,opt,name=firebomb,proto3" json:"firebomb,omitempty"`
	Smoke          uint32                  `protobuf:"varint,10,opt,name=smoke,proto3" json:"smoke,omitempty"`
	Defuser        uint32                  `protobuf:"varint,11,opt,name=defuser,proto3" json:"defuser,omitempty"`
	Decoy          uint32                  `protobuf:"varint,12,opt,name=decoy,proto3" json:"decoy,omitempty"`
	Players        []*CsgoPlayerScoreBoard `protobuf:"bytes,13,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *CsgoTeamScoreBoard) Reset() {
	*x = CsgoTeamScoreBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoTeamScoreBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoTeamScoreBoard) ProtoMessage() {}

func (x *CsgoTeamScoreBoard) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoTeamScoreBoard.ProtoReflect.Descriptor instead.
func (*CsgoTeamScoreBoard) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{56}
}

func (x *CsgoTeamScoreBoard) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *CsgoTeamScoreBoard) GetScoreMaps() uint32 {
	if x != nil {
		return x.ScoreMaps
	}
	return 0
}

func (x *CsgoTeamScoreBoard) GetScoreRounds() uint32 {
	if x != nil {
		return x.ScoreRounds
	}
	return 0
}

func (x *CsgoTeamScoreBoard) GetSide() CsgoSide {
	if x != nil {
		return x.Side
	}
	return CsgoSide_CSGO_SIDE_UNSPECIFIED
}

func (x *CsgoTeamScoreBoard) GetEquipmentValue() uint32 {
	if x != nil {
		return x.EquipmentValue
	}
	return 0
}

func (x *CsgoTeamScoreBoard) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CsgoTeamScoreBoard) GetFrag() uint32 {
	if x != nil {
		return x.Frag
	}
	return 0
}

func (x *CsgoTeamScoreBoard) GetFlashbang() uint32 {
	if x != nil {
		return x.Flashbang
	}
	return 0
}

func (x *CsgoTeamScoreBoard) GetFirebomb() uint32 {
	if x != nil {
		return x.Firebomb
	}
	return 0
}

func (x *CsgoTeamScoreBoard) GetSmoke() uint32 {
	if x != nil {
		return x.Smoke
	}
	return 0
}

func (x *CsgoTeamScoreBoard) GetDefuser() uint32 {
	if x != nil {
		return x.Defuser
	}
	return 0
}

func (x *CsgoTeamScoreBoard) GetDecoy() uint32 {
	if x != nil {
		return x.Decoy
	}
	return 0
}

func (x *CsgoTeamScoreBoard) GetPlayers() []*CsgoPlayerScoreBoard {
	if x != nil {
		return x.Players
	}
	return nil
}

type CsgoPlayerScoreBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player       *Player           `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	Health       uint32            `protobuf:"varint,2,opt,name=health,proto3" json:"health,omitempty"`
	Kills        uint32            `protobuf:"varint,3,opt,name=kills,proto3" json:"kills,omitempty"`
	Deaths       uint32            `protobuf:"varint,4,opt,name=deaths,proto3" json:"deaths,omitempty"`
	Assists      uint32            `protobuf:"varint,5,opt,name=assists,proto3" json:"assists,omitempty"`
	Damage       uint32            `protobuf:"varint,6,opt,name=damage,proto3" json:"damage,omitempty"`
	HeadshotRate float64           `protobuf:"fixed64,7,opt,name=headshot_rate,json=headshotRate,proto3" json:"headshot_rate,omitempty"`
	Armor        uint32            `protobuf:"varint,8,opt,name=armor,proto3" json:"armor,omitempty"`
	Balance      int32             `protobuf:"varint,9,opt,name=balance,proto3" json:"balance,omitempty"`
	Primary      uint32            `protobuf:"varint,10,opt,name=primary,proto3" json:"primary,omitempty"`
	Secondary    uint32            `protobuf:"varint,11,opt,name=secondary,proto3" json:"secondary,omitempty"`
	OpeningDuels *CsgoOpeningDuels `protobuf:"bytes,12,opt,name=opening_duels,json=openingDuels,proto3" json:"opening_duels,omitempty"`
}

func (x *CsgoPlayerScoreBoard) Reset() {
	*x = CsgoPlayerScoreBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoPlayerScoreBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoPlayerScoreBoard) ProtoMessage() {}

func (x *CsgoPlayerScoreBoard) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoPlayerScoreBoard.ProtoReflect.Descriptor instead.
func (*CsgoPlayerScoreBoard) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{57}
}

func (x *CsgoPlayerScoreBoard) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *CsgoPlayerScoreBoard) GetHealth() uint32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *CsgoPlayerScoreBoard) GetKills() uint32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *CsgoPlayerScoreBoard) GetDeaths() uint32 {
	if x != nil {
		return x.Deaths
	}
	return 0
}

func (x *CsgoPlayerScoreBoard) GetAssists() uint32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *CsgoPlayerScoreBoard) GetDamage() uint32 {
	if x != nil {
		return x.Damage
	}
	return 0
}

func (x *CsgoPlayerScoreBoard) GetHeadshotRate() float64 {
	if x != nil {
		return x.HeadshotRate
	}
	return 0
}

func (x *CsgoPlayerScoreBoard) GetArmor() uint32 {
	if x != nil {
		return x.Armor
	}
	return 0
}

func (x *CsgoPlayerScoreBoard) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CsgoPlayerScoreBoard) GetPrimary() uint32 {
	if x != nil {
		return x.Primary
	}
	return 0
}

func (x *CsgoPlayerScoreBoard) GetSecondary() uint32 {
	if x != nil {
		return x.Secondary
	}
	return 0
}

func (x *CsgoPlayerScoreBoard) GetOpeningDuels() *CsgoOpeningDuels {
	if x != nil {
		return x.OpeningDuels
	}
	return nil
}

type CsgoOpeningDuels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kills  uint32 `protobuf:"varint,1,opt,name=kills,proto3" json:"kills,omitempty"`
	Deaths uint32 `protobuf:"varint,2,opt,name=deaths,proto3" json:"deaths,omitempty"`
}

func (x *CsgoOpeningDuels) Reset() {
	*x = CsgoOpeningDuels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoOpeningDuels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoOpeningDuels) ProtoMessage() {}

func (x *CsgoOpeningDuels) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoOpeningDuels.ProtoReflect.Descriptor instead.
func (*CsgoOpeningDuels) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{58}
}

func (x *CsgoOpeningDuels) GetKills() uint32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *CsgoOpeningDuels) GetDeaths() uint32 {
	if x != nil {
		return x.Deaths
	}
	return 0
}

type CsgoEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Team        *Team  `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
	Round       uint32 `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	RoundTime   uint32 `protobuf:"varint,4,opt,name=round_time,json=roundTime,proto3" json:"round_time,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CsgoEvents) Reset() {
	*x = CsgoEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsgoEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsgoEvents) ProtoMessage() {}

func (x *CsgoEvents) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsgoEvents.ProtoReflect.Descriptor instead.
func (*CsgoEvents) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{59}
}

func (x *CsgoEvents) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CsgoEvents) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *CsgoEvents) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *CsgoEvents) GetRoundTime() uint32 {
	if x != nil {
		return x.RoundTime
	}
	return 0
}

func (x *CsgoEvents) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Sport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Sport) Reset() {
	*x = Sport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sport) ProtoMessage() {}

func (x *Sport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sport.ProtoReflect.Descriptor instead.
func (*Sport) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{60}
}

func (x *Sport) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Tournament struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StartTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
}

func (x *Tournament) Reset() {
	*x = Tournament{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tournament) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tournament) ProtoMessage() {}

func (x *Tournament) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tournament.ProtoReflect.Descriptor instead.
func (*Tournament) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{61}
}

func (x *Tournament) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tournament) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tournament) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *Tournament) GetEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IconPath *string `protobuf:"bytes,3,opt,name=icon_path,json=iconPath,proto3,oneof" json:"icon_path,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{62}
}

func (x *Team) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetIconPath() string {
	if x != nil && x.IconPath != nil {
		return *x.IconPath
	}
	return ""
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlannedStartTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=planned_start_timestamp,json=plannedStartTimestamp,proto3" json:"planned_start_timestamp,omitempty"`
	StartTimestamp        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	Tournament            *Tournament            `protobuf:"bytes,5,opt,name=tournament,proto3" json:"tournament,omitempty"`
	HomeTeam              *Team                  `protobuf:"bytes,6,opt,name=home_team,json=homeTeam,proto3,oneof" json:"home_team,omitempty"`
	HomeScore             *int32                 `protobuf:"varint,7,opt,name=home_score,json=homeScore,proto3,oneof" json:"home_score,omitempty"`
	AwayTeam              *Team                  `protobuf:"bytes,8,opt,name=away_team,json=awayTeam,proto3,oneof" json:"away_team,omitempty"`
	AwayScore             *int32                 `protobuf:"varint,9,opt,name=away_score,json=awayScore,proto3,oneof" json:"away_score,omitempty"`
	WinTeam               *Team                  `protobuf:"bytes,10,opt,name=win_team,json=winTeam,proto3,oneof" json:"win_team,omitempty"`
	IsClosed              bool                   `protobuf:"varint,11,opt,name=is_closed,json=isClosed,proto3" json:"is_closed,omitempty"`
	BestOfType            BestOfType             `protobuf:"varint,12,opt,name=best_of_type,json=bestOfType,proto3,enum=bragi.BestOfType" json:"best_of_type,omitempty"`
	Maps                  []*Map                 `protobuf:"bytes,13,rep,name=maps,proto3" json:"maps,omitempty"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{63}
}

func (x *Match) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Match) GetPlannedStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.PlannedStartTimestamp
	}
	return nil
}

func (x *Match) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *Match) GetEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *Match) GetTournament() *Tournament {
	if x != nil {
		return x.Tournament
	}
	return nil
}

func (x *Match) GetHomeTeam() *Team {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *Match) GetHomeScore() int32 {
	if x != nil && x.HomeScore != nil {
		return *x.HomeScore
	}
	return 0
}

func (x *Match) GetAwayTeam() *Team {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

func (x *Match) GetAwayScore() int32 {
	if x != nil && x.AwayScore != nil {
		return *x.AwayScore
	}
	return 0
}

func (x *Match) GetWinTeam() *Team {
	if x != nil {
		return x.WinTeam
	}
	return nil
}

func (x *Match) GetIsClosed() bool {
	if x != nil {
		return x.IsClosed
	}
	return false
}

func (x *Match) GetBestOfType() BestOfType {
	if x != nil {
		return x.BestOfType
	}
	return BestOfType_BEST_OF_TYPE_UNSPECIFIED
}

func (x *Match) GetMaps() []*Map {
	if x != nil {
		return x.Maps
	}
	return nil
}

type Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Order          int32                  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	StartTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_timestamp,json=startTimestamp,proto3,oneof" json:"start_timestamp,omitempty"`
	EndTimestamp   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_timestamp,json=endTimestamp,proto3,oneof" json:"end_timestamp,omitempty"`
	IsClosed       bool                   `protobuf:"varint,5,opt,name=is_closed,json=isClosed,proto3" json:"is_closed,omitempty"`
}

func (x *Map) Reset() {
	*x = Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{64}
}

func (x *Map) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Map) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Map) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *Map) GetEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *Map) GetIsClosed() bool {
	if x != nil {
		return x.IsClosed
	}
	return false
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Nickname string  `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	RealName *string `protobuf:"bytes,3,opt,name=real_name,json=realName,proto3,oneof" json:"real_name,omitempty"`
	Shortcut *string `protobuf:"bytes,4,opt,name=shortcut,proto3,oneof" json:"shortcut,omitempty"`
	IconPath *string `protobuf:"bytes,5,opt,name=icon_path,json=iconPath,proto3,oneof" json:"icon_path,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{65}
}

func (x *Player) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Player) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Player) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *Player) GetShortcut() string {
	if x != nil && x.Shortcut != nil {
		return *x.Shortcut
	}
	return ""
}

func (x *Player) GetIconPath() string {
	if x != nil && x.IconPath != nil {
		return *x.IconPath
	}
	return ""
}

type TournamentTeamStatisticsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team  *Team   `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TournamentTeamStatisticsValue) Reset() {
	*x = TournamentTeamStatisticsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentTeamStatisticsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentTeamStatisticsValue) ProtoMessage() {}

func (x *TournamentTeamStatisticsValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentTeamStatisticsValue.ProtoReflect.Descriptor instead.
func (*TournamentTeamStatisticsValue) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{66}
}

func (x *TournamentTeamStatisticsValue) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *TournamentTeamStatisticsValue) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type TournamentTeamStatisticsValueInPercent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team  *Team   `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"` // In value in percent
}

func (x *TournamentTeamStatisticsValueInPercent) Reset() {
	*x = TournamentTeamStatisticsValueInPercent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentTeamStatisticsValueInPercent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentTeamStatisticsValueInPercent) ProtoMessage() {}

func (x *TournamentTeamStatisticsValueInPercent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentTeamStatisticsValueInPercent.ProtoReflect.Descriptor instead.
func (*TournamentTeamStatisticsValueInPercent) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{67}
}

func (x *TournamentTeamStatisticsValueInPercent) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *TournamentTeamStatisticsValueInPercent) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PostMapStatisticsValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PercentageOfMaximum float32 `protobuf:"fixed32,1,opt,name=percentage_of_maximum,json=percentageOfMaximum,proto3" json:"percentage_of_maximum,omitempty"`
	Total               float32 `protobuf:"fixed32,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PostMapStatisticsValues) Reset() {
	*x = PostMapStatisticsValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostMapStatisticsValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostMapStatisticsValues) ProtoMessage() {}

func (x *PostMapStatisticsValues) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostMapStatisticsValues.ProtoReflect.Descriptor instead.
func (*PostMapStatisticsValues) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{68}
}

func (x *PostMapStatisticsValues) GetPercentageOfMaximum() float32 {
	if x != nil {
		return x.PercentageOfMaximum
	}
	return 0
}

func (x *PostMapStatisticsValues) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type StatisticsValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avg        float32 `protobuf:"fixed32,1,opt,name=avg,proto3" json:"avg,omitempty"`
	Percentile float32 `protobuf:"fixed32,2,opt,name=percentile,proto3" json:"percentile,omitempty"`
	Total      float32 `protobuf:"fixed32,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *StatisticsValues) Reset() {
	*x = StatisticsValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bragi_bragi_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsValues) ProtoMessage() {}

func (x *StatisticsValues) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bragi_bragi_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsValues.ProtoReflect.Descriptor instead.
func (*StatisticsValues) Descriptor() ([]byte, []int) {
	return file_proto_bragi_bragi_proto_rawDescGZIP(), []int{69}
}

func (x *StatisticsValues) GetAvg() float32 {
	if x != nil {
		return x.Avg
	}
	return 0
}

func (x *StatisticsValues) GetPercentile() float32 {
	if x != nil {
		return x.Percentile
	}
	return 0
}

func (x *StatisticsValues) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_proto_bragi_bragi_proto protoreflect.FileDescriptor

var file_proto_bragi_bragi_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2f, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x1f, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x19, 0x4c,
	0x61, 0x73, 0x74, 0x46, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x77, 0x61,
	0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x12, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x15, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x18, 0x50, 0x6f, 0x73,
	0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x1b,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x5f, 0x0a, 0x1f, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x22, 0x9e, 0x01, 0x0a, 0x24, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x22, 0x2c, 0x0a, 0x13, 0x43, 0x73, 0x67, 0x6f, 0x32, 0x64, 0x4d, 0x61, 0x46, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64,
	0x22, 0x36, 0x0a, 0x19, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x15, 0x43, 0x73, 0x67, 0x6f,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x0e,
	0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x06, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x22, 0x49, 0x0a, 0x12, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x68, 0x0a, 0x1c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x63, 0x73, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x04, 0x63, 0x73, 0x67, 0x6f,
	0x42, 0x17, 0x0a, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x44, 0x0a, 0x1a, 0x4c, 0x61, 0x73,
	0x74, 0x46, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22,
	0x66, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x63, 0x73, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x04, 0x63, 0x73, 0x67, 0x6f,
	0x42, 0x15, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x5c, 0x0a, 0x16, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x73, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x63, 0x73,
	0x67, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x6e, 0x0a, 0x1c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x73, 0x67, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x04, 0x63, 0x73, 0x67, 0x6f, 0x42, 0x17, 0x0a, 0x15,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x72, 0x0a, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x73, 0x67,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x48, 0x00, 0x52, 0x04, 0x63, 0x73, 0x67, 0x6f, 0x42, 0x1d, 0x0a, 0x1b, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x7e, 0x0a, 0x25, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x73, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52,
	0x04, 0x63, 0x73, 0x67, 0x6f, 0x42, 0x22, 0x0a, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x97, 0x11, 0x0a, 0x12, 0x43, 0x73,
	0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x1f, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61,
	0x6d, 0x12, 0x48, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x6d,
	0x61, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x6d, 0x61,
	0x70, 0x5f, 0x77, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x57, 0x69,
	0x6e, 0x72, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x77,
	0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x69, 0x64, 0x65, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x69, 0x6e, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x47, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x77, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c,
	0x4d, 0x61, 0x70, 0x57, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x13, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x46, 0x0a, 0x0e, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x73, 0x67, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x69,
	0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0d, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6c,
	0x57, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x70, 0x69, 0x73, 0x74, 0x6f,
	0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x73, 0x67, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x69, 0x64,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x13, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6c, 0x57,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x16,
	0x70, 0x69, 0x73, 0x74, 0x6f, 0x6c, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x14, 0x70,
	0x69, 0x73, 0x74, 0x6f, 0x6c, 0x4c, 0x6f, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x06, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x39, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x66,
	0x6c, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x0c, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x37, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x68, 0x65,
	0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x44, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x73, 0x67, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x69,
	0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x18, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53,
	0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x61, 0x77, 0x70, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x69, 0x64, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x08, 0x61, 0x77, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12,
	0x50, 0x0a, 0x13, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77,
	0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x12, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x4c, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77,
	0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x10, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x57, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x46, 0x0a, 0x0e, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x43, 0x73, 0x67, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x69,
	0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0d, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x33, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x73, 0x67, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x69, 0x64,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x6f,
	0x57, 0x69, 0x6e, 0x33, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x51, 0x0a, 0x15, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x36, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x54, 0x6f, 0x57, 0x69, 0x6e, 0x36, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x51, 0x0a,
	0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x39, 0x5f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x11, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x54, 0x6f, 0x57, 0x69, 0x6e, 0x39, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x12, 0x53, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x6e,
	0x5f, 0x31, 0x32, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x6f, 0x57, 0x69, 0x6e, 0x31, 0x32, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f,
	0x6c, 0x6f, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0a, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x66, 0x61, 0x76, 0x6f, 0x75,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x57,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x10, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x73, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x04, 0x66,
	0x6f, 0x72, 0x6d, 0x22, 0xfb, 0x07, 0x0a, 0x14, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x25, 0x0a, 0x06,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x05, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x06, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0f, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x4f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0d,
	0x68, 0x65, 0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0c, 0x68, 0x65,
	0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x66, 0x6c,
	0x61, 0x73, 0x68, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0c, 0x66, 0x6c, 0x61, 0x73,
	0x68, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x61, 0x77, 0x70, 0x5f, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x08, 0x61, 0x77, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x0e,
	0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0d, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0f,
	0x65, 0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0e,
	0x65, 0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x12, 0x43,
	0x0a, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x12, 0x36, 0x0a, 0x0a, 0x6c, 0x75, 0x72, 0x6b, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x09,
	0x6c, 0x75, 0x72, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x67, 0x72, 0x65,
	0x6e, 0x61, 0x64, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0c, 0x67, 0x72, 0x65, 0x6e, 0x61,
	0x64, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x66, 0x61, 0x76, 0x6f, 0x75,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x57,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x10, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x73, 0x22, 0xc0, 0x02, 0x0a, 0x15, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x03, 0x6d,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x52, 0x0a,
	0x14, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x12, 0x68,
	0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x52, 0x0a, 0x14, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d,
	0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x12, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x64, 0x75, 0x65, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67,
	0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x44, 0x75, 0x65, 0x6c, 0x52, 0x05, 0x64, 0x75,
	0x65, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x06, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x22, 0xe4, 0x03, 0x0a, 0x12, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0a, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x09, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x09, 0x69, 0x73,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x73,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0f, 0x69, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x69,
	0x7a, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x73, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc0, 0x04, 0x0a, 0x18,
	0x43, 0x73, 0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x1d, 0x74,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x00, 0x52, 0x1a, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x73, 0x74, 0x73,
	0x57, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x25, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x01, 0x52, 0x21, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0a, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x60, 0x0a, 0x1a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67,
	0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x18, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x73, 0x74,
	0x73, 0x5f, 0x77, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x42, 0x28, 0x0a, 0x26, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xd5,
	0x08, 0x0a, 0x19, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x51, 0x0a,
	0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x11, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x57, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x4c, 0x6f, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x38,
	0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x44, 0x65,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0d,
	0x68, 0x65, 0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x43, 0x0a, 0x0d, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0c, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0c, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x44, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x08, 0x6b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x1a, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x77,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x17, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x57, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x57, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x10, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x57,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x22, 0x8b, 0x0b, 0x0a, 0x1b, 0x43, 0x73, 0x67, 0x6f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x3d, 0x0a,
	0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0d, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x05,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x05, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x07, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x73,
	0x75, 0x72, 0x76, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0e, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x65, 0x64, 0x12, 0x4a, 0x0a,
	0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x43, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0c, 0x66,
	0x6c, 0x61, 0x73, 0x68, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x43, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0d, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0d,
	0x67, 0x72, 0x65, 0x6e, 0x61, 0x64, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x0c, 0x67, 0x72, 0x65, 0x6e, 0x61, 0x64, 0x65, 0x73, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x47, 0x0a, 0x0f, 0x65, 0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6c, 0x61,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0e, 0x65, 0x6e, 0x65, 0x6d,
	0x69, 0x65, 0x73, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x77,
	0x70, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x08, 0x61,
	0x77, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x6c, 0x75, 0x72, 0x6b, 0x5f,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x09, 0x6c, 0x75, 0x72,
	0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x3b, 0x0a, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x08, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x57, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x10, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x57, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x10, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x1c, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x29, 0x0a,
	0x08, 0x63, 0x73, 0x67, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x52,
	0x07, 0x63, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x2c, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x69, 0x64, 0x65, 0x52, 0x0a, 0x77, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x1e, 0x43, 0x73, 0x67, 0x6f, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x6d, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43,
	0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xea, 0x03, 0x0a,
	0x1b, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x03,
	0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70,
	0x69, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x1d, 0x74, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x1a, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x6e,
	0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x55, 0x0a, 0x25, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x01, 0x52, 0x21, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x65, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12,
	0x4c, 0x0a, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73,
	0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x42, 0x20, 0x0a,
	0x1e, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x6e,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42,
	0x28, 0x0a, 0x26, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x43, 0x73,
	0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x25, 0x0a, 0x06,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x22, 0xdc, 0x03, 0x0a, 0x20, 0x43, 0x73, 0x67,
	0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x73, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x49, 0x0a,
	0x0d, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x68, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x5f, 0x0a, 0x19, 0x68, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x16, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x50, 0x0a, 0x11, 0x68, 0x69, 0x67,
	0x68, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x77, 0x70, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x68, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x41, 0x77, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x5b, 0x0a, 0x12, 0x68,
	0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x13, 0x68, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x44, 0x65, 0x66,
	0x75, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0xb3, 0x04, 0x0a, 0x22, 0x43, 0x73, 0x67, 0x6f,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x4a,
	0x0a, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73,
	0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0c, 0x68, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x60, 0x0a, 0x19, 0x68, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x16, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x4c, 0x0a, 0x0e,
	0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67,
	0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x68, 0x69, 0x67,
	0x68, 0x65, 0x73, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x15, 0x68, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x13, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x16, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73,
	0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x14, 0x68, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x59, 0x0a, 0x15, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x13, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73,
	0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0x82, 0x02,
	0x0a, 0x15, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x22, 0x0a,
	0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x08, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x48, 0x01, 0x52, 0x08, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0d, 0x6f, 0x70, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x73, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x0f, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x44, 0x75, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0a,
	0x68, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0a,
	0x61, 0x77, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x77,
	0x61, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x77, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x18, 0x43, 0x73, 0x67, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x0a, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x73, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x12,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x22,
	0xd3, 0x01, 0x0a, 0x14, 0x43, 0x73, 0x67, 0x6f, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x77, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x73, 0x67, 0x6f, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x52, 0x06, 0x77, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x64,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x13, 0x68, 0x65, 0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x57,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x1b, 0x43, 0x73, 0x67, 0x6f, 0x57, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73,
	0x67, 0x6f, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x52, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x77,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15,
	0x68, 0x65, 0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x77,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x68, 0x65, 0x61,
	0x64, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x22, 0x5d, 0x0a, 0x07, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22,
	0x71, 0x0a, 0x0b, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x06, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x06, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x30, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x22, 0x6e, 0x0a, 0x11, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67,
	0x6f, 0x4d, 0x61, 0x70, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x22, 0x60, 0x0a, 0x0a, 0x43, 0x73, 0x67, 0x6f, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x22, 0x64, 0x0a, 0x08, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61,
	0x6d, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x0a, 0x43,
	0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x63, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x63, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x69,
	0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xfc,
	0x01, 0x0a, 0x13, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x6c, 0x0a, 0x1f, 0x63, 0x73, 0x67, 0x6f, 0x5f, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x73, 0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x69, 0x0a, 0x1e, 0x63, 0x73, 0x67, 0x6f, 0x5f, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x1b, 0x63, 0x73, 0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x0c, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8f, 0x01,
	0x0a, 0x1c, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x91, 0x01, 0x0a, 0x1b, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x62, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x62, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x22, 0x9f, 0x04, 0x0a, 0x10, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x57, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x61, 0x70, 0x73, 0x57, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x70,
	0x73, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61,
	0x70, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x64,
	0x72, 0x61, 0x77, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x73,
	0x44, 0x72, 0x61, 0x77, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f,
	0x77, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x57, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x6c,
	0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d,
	0x61, 0x70, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67,
	0x6f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x99, 0x03, 0x0a, 0x15, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2d, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x48,
	0x00, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x48, 0x02, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x48, 0x04, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x22, 0xc5, 0x01, 0x0a, 0x09, 0x43, 0x73, 0x67, 0x6f, 0x32, 0x64, 0x4d, 0x61, 0x70, 0x12,
	0x4b, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x32, 0x64, 0x4d, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0e,
	0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67,
	0x6f, 0x32, 0x64, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6d, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x62, 0x6f, 0x6d, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x26, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x17, 0x43, 0x73,
	0x67, 0x6f, 0x32, 0x64, 0x4d, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4d, 0x61, 0x70, 0x32,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4d, 0x61, 0x70,
	0x32, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x43, 0x73,
	0x67, 0x6f, 0x32, 0x64, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6d, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4d, 0x61,
	0x70, 0x32, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x75,
	0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x6f, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x64, 0x22, 0x2b, 0x0a,
	0x0d, 0x4d, 0x61, 0x70, 0x32, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x22, 0x60, 0x0a, 0x09, 0x43, 0x73,
	0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x9d, 0x01, 0x0a,
	0x0e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x20, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x4d, 0x61, 0x70, 0x52, 0x03, 0x6d, 0x61,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0xaa, 0x03, 0x0a,
	0x12, 0x43, 0x73, 0x67, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4d,
	0x61, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67,
	0x6f, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x72,
	0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x62, 0x61, 0x6e, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x62, 0x61, 0x6e, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x65, 0x62, 0x6f, 0x6d, 0x62, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x72, 0x65, 0x62, 0x6f, 0x6d, 0x62, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x6d, 0x6f,
	0x6b, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x63, 0x6f, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x63,
	0x6f, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x80, 0x03, 0x0a, 0x14, 0x43, 0x73,
	0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x3c,
	0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x65, 0x6c, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73,
	0x67, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x65, 0x6c, 0x73, 0x52, 0x0c,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x65, 0x6c, 0x73, 0x22, 0x40, 0x0a, 0x10,
	0x43, 0x73, 0x67, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x65, 0x6c, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x22, 0x98,
	0x01, 0x0a, 0x0a, 0x43, 0x73, 0x67, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65,
	0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x05, 0x53, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x0a, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f,
	0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x5a, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xb0, 0x05, 0x0a, 0x05,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x17, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f,
	0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x31, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x02, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x04, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x54, 0x65,
	0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x12, 0x33, 0x0a, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x65, 0x73,
	0x74, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6d, 0x61, 0x70, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x4d, 0x61,
	0x70, 0x52, 0x04, 0x6d, 0x61, 0x70, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x22, 0xfe,
	0x01, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xc2, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x63, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08,
	0x69, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x22, 0x56, 0x0a, 0x1d, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5f, 0x0a, 0x26,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x63, 0x0a,
	0x17, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x4f, 0x66, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x5a, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2a, 0xcf,
	0x01, 0x0a, 0x0e, 0x43, 0x73, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x46, 0x52, 0x41, 0x47, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x53, 0x47,
	0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x53, 0x47, 0x4f, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x57, 0x50, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4c, 0x55, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x05,
	0x2a, 0x61, 0x0a, 0x08, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x69, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x53, 0x47, 0x4f, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x53, 0x47, 0x4f, 0x5f,
	0x53, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x53, 0x47,
	0x4f, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x49, 0x53, 0x54,
	0x53, 0x10, 0x02, 0x2a, 0xfb, 0x01, 0x0a, 0x10, 0x43, 0x73, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x53, 0x47, 0x4f,
	0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x30,
	0x43, 0x53, 0x47, 0x4f, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f,
	0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x49,
	0x53, 0x54, 0x53, 0x5f, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x20, 0x0a, 0x1c, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f,
	0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x55, 0x53, 0x45, 0x10,
	0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x53, 0x47, 0x4f, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x05, 0x2a, 0x8d, 0x01, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x49,
	0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x54,
	0x48, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x49, 0x58,
	0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x49, 0x4d,
	0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10,
	0x04, 0x2a, 0xc4, 0x01, 0x0a, 0x0a, 0x42, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x4f, 0x31, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x32, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x45,
	0x53, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x33, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x4f, 0x34, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x4f,
	0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x35, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x42, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x36,
	0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x4f, 0x37, 0x10, 0x07, 0x32, 0xaa, 0x08, 0x0a, 0x09, 0x42, 0x72, 0x61,
	0x67, 0x69, 0x47, 0x72, 0x70, 0x63, 0x12, 0x37, 0x0a, 0x06, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x14, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x53,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x0b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x18, 0x54, 0x65, 0x61, 0x6d, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x72,
	0x61, 0x67, 0x69, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x76, 0x65, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x72, 0x61,
	0x67, 0x69, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x58, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x14, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x18,
	0x54, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x1d, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41,
	0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x62,
	0x72, 0x61, 0x67, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x43, 0x73, 0x67,
	0x6f, 0x32, 0x64, 0x4d, 0x61, 0x46, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x67,
	0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x32, 0x64, 0x4d, 0x61, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73,
	0x67, 0x6f, 0x32, 0x64, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x12, 0x43,
	0x73, 0x67, 0x6f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x65, 0x65,
	0x64, 0x12, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x45,
	0x0a, 0x0e, 0x43, 0x73, 0x67, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x65, 0x65, 0x64,
	0x12, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x2e, 0x43, 0x73, 0x67, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x00, 0x30, 0x01, 0x42, 0x21, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x64, 0x64,
	0x69, 0x6e, 0x2e, 0x62, 0x72, 0x61, 0x67, 0x69, 0x5a, 0x0e, 0x6f, 0x64, 0x64, 0x69, 0x6e, 0x2e,
	0x67, 0x67, 0x2f, 0x62, 0x72, 0x61, 0x67, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_bragi_bragi_proto_rawDescOnce sync.Once
	file_proto_bragi_bragi_proto_rawDescData = file_proto_bragi_bragi_proto_rawDesc
)

func file_proto_bragi_bragi_proto_rawDescGZIP() []byte {
	file_proto_bragi_bragi_proto_rawDescOnce.Do(func() {
		file_proto_bragi_bragi_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_bragi_bragi_proto_rawDescData)
	})
	return file_proto_bragi_bragi_proto_rawDescData
}

var file_proto_bragi_bragi_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_proto_bragi_bragi_proto_msgTypes = make([]protoimpl.MessageInfo, 70)
var file_proto_bragi_bragi_proto_goTypes = []interface{}{
	(CsgoPlayerRole)(0),                            // 0: bragi.CsgoPlayerRole
	(CsgoSide)(0),                                  // 1: bragi.CsgoSide
	(CsgoRoundOutcome)(0),                          // 2: bragi.CsgoRoundOutcome
	(Timeframe)(0),                                 // 3: bragi.Timeframe
	(BestOfType)(0),                                // 4: bragi.BestOfType
	(*SportsRequest)(nil),                          // 5: bragi.SportsRequest
	(*TeamHistoricalStatisticsRequest)(nil),        // 6: bragi.TeamHistoricalStatisticsRequest
	(*LastFiveEncountersRequest)(nil),              // 7: bragi.LastFiveEncountersRequest
	(*TournamentsRequest)(nil),                     // 8: bragi.TournamentsRequest
	(*TournamentInfoRequest)(nil),                  // 9: bragi.TournamentInfoRequest
	(*PostMapStatisticsRequest)(nil),               // 10: bragi.PostMapStatisticsRequest
	(*TournamentStatisticsRequest)(nil),            // 11: bragi.TournamentStatisticsRequest
	(*TeamTournamentStatisticsRequest)(nil),        // 12: bragi.TeamTournamentStatisticsRequest
	(*PlayerStatisticsAccordingRoleRequest)(nil),   // 13: bragi.PlayerStatisticsAccordingRoleRequest
	(*Csgo2DMaFeedRequest)(nil),                    // 14: bragi.Csgo2dMaFeedRequest
	(*CsgoScoreBoardFeedRequest)(nil),              // 15: bragi.CsgoScoreBoardFeedRequest
	(*CsgoEventsFeedRequest)(nil),                  // 16: bragi.CsgoEventsFeedRequest
	(*SportsResponse)(nil),                         // 17: bragi.SportsResponse
	(*TournamentResponse)(nil),                     // 18: bragi.TournamentResponse
	(*HistoricalStatisticsResponse)(nil),           // 19: bragi.HistoricalStatisticsResponse
	(*LastFiveEncountersResponse)(nil),             // 20: bragi.LastFiveEncountersResponse
	(*PostMapStatisticsResponse)(nil),              // 21: bragi.PostMapStatisticsResponse
	(*TournamentInfoResponse)(nil),                 // 22: bragi.TournamentInfoResponse
	(*TournamentStatisticsResponse)(nil),           // 23: bragi.TournamentStatisticsResponse
	(*TeamTournamentStatisticsResponse)(nil),       // 24: bragi.TeamTournamentStatisticsResponse
	(*PlayerStatisticsAccordingRoleResponse)(nil),  // 25: bragi.PlayerStatisticsAccordingRoleResponse
	(*CsgoTeamStatistics)(nil),                     // 26: bragi.CsgoTeamStatistics
	(*CsgoPlayerStatistics)(nil),                   // 27: bragi.CsgoPlayerStatistics
	(*CsgoPostMapStatistics)(nil),                  // 28: bragi.CsgoPostMapStatistics
	(*CsgoTournamentInfo)(nil),                     // 29: bragi.CsgoTournamentInfo
	(*CsgoTournamentStatistics)(nil),               // 30: bragi.CsgoTournamentStatistics
	(*CsgoTeamPostMapStatistics)(nil),              // 31: bragi.CsgoTeamPostMapStatistics
	(*CsgoPlayerPostMapStatistics)(nil),            // 32: bragi.CsgoPlayerPostMapStatistics
	(*CsgoRoundPostmap)(nil),                       // 33: bragi.CsgoRoundPostmap
	(*CsgoMapStatisticsAccordingSide)(nil),         // 34: bragi.CsgoMapStatisticsAccordingSide
	(*CsgoTournamentMapStatistics)(nil),            // 35: bragi.CsgoTournamentMapStatistics
	(*CsgoTournamentPlayerStatistics)(nil),         // 36: bragi.CsgoTournamentPlayerStatistics
	(*CsgoTournamentBestTeamStatistics)(nil),       // 37: bragi.CsgoTournamentBestTeamStatistics
	(*CsgoTournamentBestPlayerStatistics)(nil),     // 38: bragi.CsgoTournamentBestPlayerStatistics
	(*CsgoTeamStandingRound)(nil),                  // 39: bragi.CsgoTeamStandingRound
	(*CsgoPlayersDuel)(nil),                        // 40: bragi.CsgoPlayersDuel
	(*CsgoStatisticsSideValues)(nil),               // 41: bragi.CsgoStatisticsSideValues
	(*CsgoWeaponStatistics)(nil),                   // 42: bragi.CsgoWeaponStatistics
	(*CsgoWeaponPostMapStatistics)(nil),            // 43: bragi.CsgoWeaponPostMapStatistics
	(*CsgoMap)(nil),                                // 44: bragi.CsgoMap
	(*CsgoMapVote)(nil),                            // 45: bragi.CsgoMapVote
	(*CsgoMapStatistics)(nil),                      // 46: bragi.CsgoMapStatistics
	(*CsgoWeapon)(nil),                             // 47: bragi.CsgoWeapon
	(*CsgoTeam)(nil),                               // 48: bragi.CsgoTeam
	(*CsgoPlayer)(nil),                             // 49: bragi.CsgoPlayer
	(*CsgoTournamentBlock)(nil),                    // 50: bragi.CsgoTournamentBlock
	(*CsgoTournamentStandingsBlock)(nil),           // 51: bragi.CsgoTournamentStandingsBlock
	(*CsgoTournamentBracketsBlock)(nil),            // 52: bragi.CsgoTournamentBracketsBlock
	(*CsgoTeamStanding)(nil),                       // 53: bragi.CsgoTeamStanding
	(*TournamentBracketNode)(nil),                  // 54: bragi.TournamentBracketNode
	(*Csgo2DMap)(nil),                              // 55: bragi.Csgo2dMap
	(*Csgo2DMapPlayerPosition)(nil),                // 56: bragi.Csgo2dMapPlayerPosition
	(*Csgo2DMapBombPosition)(nil),                  // 57: bragi.Csgo2dMapBombPosition
	(*Map2DPosition)(nil),                          // 58: bragi.Map2dPosition
	(*CsgoRound)(nil),                              // 59: bragi.CsgoRound
	(*CsgoScoreBoard)(nil),                         // 60: bragi.CsgoScoreBoard
	(*CsgoTeamScoreBoard)(nil),                     // 61: bragi.CsgoTeamScoreBoard
	(*CsgoPlayerScoreBoard)(nil),                   // 62: bragi.CsgoPlayerScoreBoard
	(*CsgoOpeningDuels)(nil),                       // 63: bragi.CsgoOpeningDuels
	(*CsgoEvents)(nil),                             // 64: bragi.CsgoEvents
	(*Sport)(nil),                                  // 65: bragi.Sport
	(*Tournament)(nil),                             // 66: bragi.Tournament
	(*Team)(nil),                                   // 67: bragi.Team
	(*Match)(nil),                                  // 68: bragi.Match
	(*Map)(nil),                                    // 69: bragi.Map
	(*Player)(nil),                                 // 70: bragi.Player
	(*TournamentTeamStatisticsValue)(nil),          // 71: bragi.TournamentTeamStatisticsValue
	(*TournamentTeamStatisticsValueInPercent)(nil), // 72: bragi.TournamentTeamStatisticsValueInPercent
	(*PostMapStatisticsValues)(nil),                // 73: bragi.PostMapStatisticsValues
	(*StatisticsValues)(nil),                       // 74: bragi.StatisticsValues
	(*timestamppb.Timestamp)(nil),                  // 75: google.protobuf.Timestamp
}
var file_proto_bragi_bragi_proto_depIdxs = []int32{
	3,   // 0: bragi.TeamHistoricalStatisticsRequest.timeframe:type_name -> bragi.Timeframe
	3,   // 1: bragi.LastFiveEncountersRequest.timeframe:type_name -> bragi.Timeframe
	75,  // 2: bragi.TournamentsRequest.date_from:type_name -> google.protobuf.Timestamp
	75,  // 3: bragi.TournamentsRequest.date_to:type_name -> google.protobuf.Timestamp
	3,   // 4: bragi.PlayerStatisticsAccordingRoleRequest.timeframe:type_name -> bragi.Timeframe
	65,  // 5: bragi.SportsResponse.sports:type_name -> bragi.Sport
	66,  // 6: bragi.TournamentResponse.tournaments:type_name -> bragi.Tournament
	26,  // 7: bragi.HistoricalStatisticsResponse.csgo:type_name -> bragi.CsgoTeamStatistics
	68,  // 8: bragi.LastFiveEncountersResponse.matches:type_name -> bragi.Match
	28,  // 9: bragi.PostMapStatisticsResponse.csgo:type_name -> bragi.CsgoPostMapStatistics
	29,  // 10: bragi.TournamentInfoResponse.csgo:type_name -> bragi.CsgoTournamentInfo
	30,  // 11: bragi.TournamentStatisticsResponse.csgo:type_name -> bragi.CsgoTournamentStatistics
	26,  // 12: bragi.TeamTournamentStatisticsResponse.csgo:type_name -> bragi.CsgoTeamStatistics
	27,  // 13: bragi.PlayerStatisticsAccordingRoleResponse.csgo:type_name -> bragi.CsgoPlayerStatistics
	67,  // 14: bragi.CsgoTeamStatistics.team:type_name -> bragi.Team
	27,  // 15: bragi.CsgoTeamStatistics.player_statistics:type_name -> bragi.CsgoPlayerStatistics
	45,  // 16: bragi.CsgoTeamStatistics.map_vote:type_name -> bragi.CsgoMapVote
	46,  // 17: bragi.CsgoTeamStatistics.map_winrate:type_name -> bragi.CsgoMapStatistics
	34,  // 18: bragi.CsgoTeamStatistics.round_winrate:type_name -> bragi.CsgoMapStatisticsAccordingSide
	74,  // 19: bragi.CsgoTeamStatistics.overall_map_winrate:type_name -> bragi.StatisticsValues
	41,  // 20: bragi.CsgoTeamStatistics.overall_round_winrate:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 21: bragi.CsgoTeamStatistics.pistol_winrate:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 22: bragi.CsgoTeamStatistics.pistol_win_conversion:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 23: bragi.CsgoTeamStatistics.pistol_loss_conversion:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 24: bragi.CsgoTeamStatistics.kills:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 25: bragi.CsgoTeamStatistics.deaths:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 26: bragi.CsgoTeamStatistics.kills_over_deaths:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 27: bragi.CsgoTeamStatistics.assists:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 28: bragi.CsgoTeamStatistics.flash_assists:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 29: bragi.CsgoTeamStatistics.damage:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 30: bragi.CsgoTeamStatistics.headshot_rate:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 31: bragi.CsgoTeamStatistics.opening_kills:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 32: bragi.CsgoTeamStatistics.opening_conversion:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 33: bragi.CsgoTeamStatistics.opening_death_conversion:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 34: bragi.CsgoTeamStatistics.awp_kills:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 35: bragi.CsgoTeamStatistics.elimination_winrate:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 36: bragi.CsgoTeamStatistics.objective_winrate:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 37: bragi.CsgoTeamStatistics.utility_damage:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 38: bragi.CsgoTeamStatistics.first_to_win_3_rounds:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 39: bragi.CsgoTeamStatistics.first_to_win_6_rounds:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 40: bragi.CsgoTeamStatistics.first_to_win_9_rounds:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 41: bragi.CsgoTeamStatistics.first_to_win_12_rounds:type_name -> bragi.CsgoStatisticsSideValues
	41,  // 42: bragi.CsgoTeamStatistics.rounds_lost:type_name -> bragi.CsgoStatisticsSideValues
	42,  // 43: bragi.CsgoTeamStatistics.favourite_weapons:type_name -> bragi.CsgoWeaponStatistics
	68,  // 44: bragi.CsgoTeamStatistics.form:type_name -> bragi.Match
	70,  // 45: bragi.CsgoPlayerStatistics.player:type_name -> bragi.Player
	74,  // 46: bragi.CsgoPlayerStatistics.kills:type_name -> bragi.StatisticsValues
	74,  // 47: bragi.CsgoPlayerStatistics.deaths:type_name -> bragi.StatisticsValues
	74,  // 48: bragi.CsgoPlayerStatistics.assists:type_name -> bragi.StatisticsValues
	74,  // 49: bragi.CsgoPlayerStatistics.kills_over_deaths:type_name -> bragi.StatisticsValues
	74,  // 50: bragi.CsgoPlayerStatistics.damage:type_name -> bragi.StatisticsValues
	74,  // 51: bragi.CsgoPlayerStatistics.headshot_rate:type_name -> bragi.StatisticsValues
	74,  // 52: bragi.CsgoPlayerStatistics.flash_assists:type_name -> bragi.StatisticsValues
	74,  // 53: bragi.CsgoPlayerStatistics.opening_kills:type_name -> bragi.StatisticsValues
	74,  // 54: bragi.CsgoPlayerStatistics.awp_kills:type_name -> bragi.StatisticsValues
	74,  // 55: bragi.CsgoPlayerStatistics.utility_damage:type_name -> bragi.StatisticsValues
	74,  // 56: bragi.CsgoPlayerStatistics.enemies_flashed:type_name -> bragi.StatisticsValues
	74,  // 57: bragi.CsgoPlayerStatistics.multi_kill_rounds:type_name -> bragi.StatisticsValues
	74,  // 58: bragi.CsgoPlayerStatistics.clutch_rounds:type_name -> bragi.StatisticsValues
	74,  // 59: bragi.CsgoPlayerStatistics.lurk_kills:type_name -> bragi.StatisticsValues
	74,  // 60: bragi.CsgoPlayerStatistics.grenades_used:type_name -> bragi.StatisticsValues
	42,  // 61: bragi.CsgoPlayerStatistics.favourite_weapons:type_name -> bragi.CsgoWeaponStatistics
	44,  // 62: bragi.CsgoPostMapStatistics.map:type_name -> bragi.CsgoMap
	31,  // 63: bragi.CsgoPostMapStatistics.home_team_statistics:type_name -> bragi.CsgoTeamPostMapStatistics
	31,  // 64: bragi.CsgoPostMapStatistics.away_team_statistics:type_name -> bragi.CsgoTeamPostMapStatistics
	40,  // 65: bragi.CsgoPostMapStatistics.duels:type_name -> bragi.CsgoPlayersDuel
	33,  // 66: bragi.CsgoPostMapStatistics.rounds:type_name -> bragi.CsgoRoundPostmap
	66,  // 67: bragi.CsgoTournamentInfo.tournament:type_name -> bragi.Tournament
	48,  // 68: bragi.CsgoTournamentInfo.teams:type_name -> bragi.CsgoTeam
	68,  // 69: bragi.CsgoTournamentInfo.matches:type_name -> bragi.Match
	50,  // 70: bragi.CsgoTournamentInfo.blocks:type_name -> bragi.CsgoTournamentBlock
	66,  // 71: bragi.CsgoTournamentStatistics.tournament:type_name -> bragi.Tournament
	37,  // 72: bragi.CsgoTournamentStatistics.best_teams:type_name -> bragi.CsgoTournamentBestTeamStatistics
	38,  // 73: bragi.CsgoTournamentStatistics.best_players:type_name -> bragi.CsgoTournamentBestPlayerStatistics
	35,  // 74: bragi.CsgoTournamentStatistics.tournament_maps_statistics:type_name -> bragi.CsgoTournamentMapStatistics
	67,  // 75: bragi.CsgoTeamPostMapStatistics.team:type_name -> bragi.Team
	32,  // 76: bragi.CsgoTeamPostMapStatistics.players_statistics:type_name -> bragi.CsgoPlayerPostMapStatistics
	73,  // 77: bragi.CsgoTeamPostMapStatistics.kills:type_name -> bragi.PostMapStatisticsValues
	73,  // 78: bragi.CsgoTeamPostMapStatistics.deaths:type_name -> bragi.PostMapStatisticsValues
	73,  // 79: bragi.CsgoTeamPostMapStatistics.assists:type_name -> bragi.PostMapStatisticsValues
	73,  // 80: bragi.CsgoTeamPostMapStatistics.kills_over_deaths:type_name -> bragi.PostMapStatisticsValues
	73,  // 81: bragi.CsgoTeamPostMapStatistics.damage:type_name -> bragi.PostMapStatisticsValues
	73,  // 82: bragi.CsgoTeamPostMapStatistics.headshot_rate:type_name -> bragi.PostMapStatisticsValues
	73,  // 83: bragi.CsgoTeamPostMapStatistics.flash_assists:type_name -> bragi.PostMapStatisticsValues
	73,  // 84: bragi.CsgoTeamPostMapStatistics.opening_kills:type_name -> bragi.PostMapStatisticsValues
	73,  // 85: bragi.CsgoTeamPostMapStatistics.kills_difference:type_name -> bragi.PostMapStatisticsValues
	73,  // 86: bragi.CsgoTeamPostMapStatistics.kill_cost:type_name -> bragi.PostMapStatisticsValues
	73,  // 87: bragi.CsgoTeamPostMapStatistics.accuracy_rate:type_name -> bragi.PostMapStatisticsValues
	73,  // 88: bragi.CsgoTeamPostMapStatistics.kills_with_dropped_weapons:type_name -> bragi.PostMapStatisticsValues
	43,  // 89: bragi.CsgoTeamPostMapStatistics.favourite_weapons:type_name -> bragi.CsgoWeaponPostMapStatistics
	70,  // 90: bragi.CsgoPlayerPostMapStatistics.player:type_name -> bragi.Player
	0,   // 91: bragi.CsgoPlayerPostMapStatistics.player_map_role:type_name -> bragi.CsgoPlayerRole
	73,  // 92: bragi.CsgoPlayerPostMapStatistics.kills:type_name -> bragi.PostMapStatisticsValues
	73,  // 93: bragi.CsgoPlayerPostMapStatistics.deaths:type_name -> bragi.PostMapStatisticsValues
	73,  // 94: bragi.CsgoPlayerPostMapStatistics.assists:type_name -> bragi.PostMapStatisticsValues
	73,  // 95: bragi.CsgoPlayerPostMapStatistics.rounds_survived:type_name -> bragi.PostMapStatisticsValues
	73,  // 96: bragi.CsgoPlayerPostMapStatistics.kills_over_deaths:type_name -> bragi.PostMapStatisticsValues
	73,  // 97: bragi.CsgoPlayerPostMapStatistics.damage:type_name -> bragi.PostMapStatisticsValues
	73,  // 98: bragi.CsgoPlayerPostMapStatistics.headshot_rate:type_name -> bragi.PostMapStatisticsValues
	73,  // 99: bragi.CsgoPlayerPostMapStatistics.flash_assists:type_name -> bragi.PostMapStatisticsValues
	73,  // 100: bragi.CsgoPlayerPostMapStatistics.opening_kills:type_name -> bragi.PostMapStatisticsValues
	73,  // 101: bragi.CsgoPlayerPostMapStatistics.clutch_rounds:type_name -> bragi.PostMapStatisticsValues
	73,  // 102: bragi.CsgoPlayerPostMapStatistics.utility_damage:type_name -> bragi.PostMapStatisticsValues
	73,  // 103: bragi.CsgoPlayerPostMapStatistics.grenades_used:type_name -> bragi.PostMapStatisticsValues
	73,  // 104: bragi.CsgoPlayerPostMapStatistics.enemies_flashed:type_name -> bragi.PostMapStatisticsValues
	73,  // 105: bragi.CsgoPlayerPostMapStatistics.awp_kills:type_name -> bragi.PostMapStatisticsValues
	73,  // 106: bragi.CsgoPlayerPostMapStatistics.lurk_kills:type_name -> bragi.PostMapStatisticsValues
	73,  // 107: bragi.CsgoPlayerPostMapStatistics.kills_difference:type_name -> bragi.PostMapStatisticsValues
	73,  // 108: bragi.CsgoPlayerPostMapStatistics.kill_cost:type_name -> bragi.PostMapStatisticsValues
	73,  // 109: bragi.CsgoPlayerPostMapStatistics.accuracy_rate:type_name -> bragi.PostMapStatisticsValues
	43,  // 110: bragi.CsgoPlayerPostMapStatistics.favourite_weapons:type_name -> bragi.CsgoWeaponPostMapStatistics
	69,  // 111: bragi.CsgoRoundPostmap.map:type_name -> bragi.Map
	44,  // 112: bragi.CsgoRoundPostmap.csgo_map:type_name -> bragi.CsgoMap
	67,  // 113: bragi.CsgoRoundPostmap.winner_team:type_name -> bragi.Team
	1,   // 114: bragi.CsgoRoundPostmap.winner_side:type_name -> bragi.CsgoSide
	2,   // 115: bragi.CsgoRoundPostmap.round_outcome:type_name -> bragi.CsgoRoundOutcome
	44,  // 116: bragi.CsgoMapStatisticsAccordingSide.map:type_name -> bragi.CsgoMap
	41,  // 117: bragi.CsgoMapStatisticsAccordingSide.statistics:type_name -> bragi.CsgoStatisticsSideValues
	44,  // 118: bragi.CsgoTournamentMapStatistics.map:type_name -> bragi.CsgoMap
	37,  // 119: bragi.CsgoTournamentMapStatistics.best_teams:type_name -> bragi.CsgoTournamentBestTeamStatistics
	38,  // 120: bragi.CsgoTournamentMapStatistics.best_players:type_name -> bragi.CsgoTournamentBestPlayerStatistics
	70,  // 121: bragi.CsgoTournamentPlayerStatistics.player:type_name -> bragi.Player
	67,  // 122: bragi.CsgoTournamentPlayerStatistics.team:type_name -> bragi.Team
	71,  // 123: bragi.CsgoTournamentBestTeamStatistics.highest_kills:type_name -> bragi.TournamentTeamStatisticsValue
	71,  // 124: bragi.CsgoTournamentBestTeamStatistics.highest_kills_over_deaths:type_name -> bragi.TournamentTeamStatisticsValue
	71,  // 125: bragi.CsgoTournamentBestTeamStatistics.highest_awp_kills:type_name -> bragi.TournamentTeamStatisticsValue
	72,  // 126: bragi.CsgoTournamentBestTeamStatistics.highest_plant_rate:type_name -> bragi.TournamentTeamStatisticsValueInPercent
	72,  // 127: bragi.CsgoTournamentBestTeamStatistics.highest_defuse_rate:type_name -> bragi.TournamentTeamStatisticsValueInPercent
	36,  // 128: bragi.CsgoTournamentBestPlayerStatistics.highest_kills:type_name -> bragi.CsgoTournamentPlayerStatistics
	36,  // 129: bragi.CsgoTournamentBestPlayerStatistics.highest_kills_over_deaths:type_name -> bragi.CsgoTournamentPlayerStatistics
	36,  // 130: bragi.CsgoTournamentBestPlayerStatistics.highest_damage:type_name -> bragi.CsgoTournamentPlayerStatistics
	36,  // 131: bragi.CsgoTournamentBestPlayerStatistics.highest_flash_assists:type_name -> bragi.CsgoTournamentPlayerStatistics
	36,  // 132: bragi.CsgoTournamentBestPlayerStatistics.highest_utility_damage:type_name -> bragi.CsgoTournamentPlayerStatistics
	36,  // 133: bragi.CsgoTournamentBestPlayerStatistics.highest_opening_kills:type_name -> bragi.CsgoTournamentPlayerStatistics
	67,  // 134: bragi.CsgoTeamStandingRound.opponent:type_name -> bragi.Team
	49,  // 135: bragi.CsgoPlayersDuel.home_player:type_name -> bragi.CsgoPlayer
	49,  // 136: bragi.CsgoPlayersDuel.away_player:type_name -> bragi.CsgoPlayer
	74,  // 137: bragi.CsgoStatisticsSideValues.terrorists:type_name -> bragi.StatisticsValues
	74,  // 138: bragi.CsgoStatisticsSideValues.counter_terrorists:type_name -> bragi.StatisticsValues
	74,  // 139: bragi.CsgoStatisticsSideValues.all:type_name -> bragi.StatisticsValues
	47,  // 140: bragi.CsgoWeaponStatistics.weapon:type_name -> bragi.CsgoWeapon
	74,  // 141: bragi.CsgoWeaponStatistics.kills_with_weapon:type_name -> bragi.StatisticsValues
	74,  // 142: bragi.CsgoWeaponStatistics.headshots_with_weapon:type_name -> bragi.StatisticsValues
	47,  // 143: bragi.CsgoWeaponPostMapStatistics.weapon:type_name -> bragi.CsgoWeapon
	46,  // 144: bragi.CsgoMapVote.picked:type_name -> bragi.CsgoMapStatistics
	46,  // 145: bragi.CsgoMapVote.banned:type_name -> bragi.CsgoMapStatistics
	44,  // 146: bragi.CsgoMapStatistics.map:type_name -> bragi.CsgoMap
	74,  // 147: bragi.CsgoMapStatistics.statistics:type_name -> bragi.StatisticsValues
	67,  // 148: bragi.CsgoTeam.team:type_name -> bragi.Team
	70,  // 149: bragi.CsgoTeam.players:type_name -> bragi.Player
	0,   // 150: bragi.CsgoPlayer.role:type_name -> bragi.CsgoPlayerRole
	51,  // 151: bragi.CsgoTournamentBlock.csgo_tournament_standings_block:type_name -> bragi.CsgoTournamentStandingsBlock
	52,  // 152: bragi.CsgoTournamentBlock.csgo_tournament_brackets_block:type_name -> bragi.CsgoTournamentBracketsBlock
	53,  // 153: bragi.CsgoTournamentStandingsBlock.standings:type_name -> bragi.CsgoTeamStanding
	54,  // 154: bragi.CsgoTournamentBracketsBlock.brackets:type_name -> bragi.TournamentBracketNode
	67,  // 155: bragi.CsgoTeamStanding.team:type_name -> bragi.Team
	39,  // 156: bragi.CsgoTeamStanding.rounds:type_name -> bragi.CsgoTeamStandingRound
	67,  // 157: bragi.TournamentBracketNode.home_team:type_name -> bragi.Team
	67,  // 158: bragi.TournamentBracketNode.away_team:type_name -> bragi.Team
	68,  // 159: bragi.TournamentBracketNode.match:type_name -> bragi.Match
	56,  // 160: bragi.Csgo2dMap.players_positions:type_name -> bragi.Csgo2dMapPlayerPosition
	57,  // 161: bragi.Csgo2dMap.bomb_positions:type_name -> bragi.Csgo2dMapBombPosition
	59,  // 162: bragi.Csgo2dMap.round:type_name -> bragi.CsgoRound
	70,  // 163: bragi.Csgo2dMapPlayerPosition.player:type_name -> bragi.Player
	1,   // 164: bragi.Csgo2dMapPlayerPosition.side:type_name -> bragi.CsgoSide
	58,  // 165: bragi.Csgo2dMapPlayerPosition.position:type_name -> bragi.Map2dPosition
	58,  // 166: bragi.Csgo2dMapPlayerPosition.forward:type_name -> bragi.Map2dPosition
	58,  // 167: bragi.Csgo2dMapBombPosition.position:type_name -> bragi.Map2dPosition
	44,  // 168: bragi.CsgoScoreBoard.map:type_name -> bragi.CsgoMap
	2,   // 169: bragi.CsgoScoreBoard.round_outcome:type_name -> bragi.CsgoRoundOutcome
	67,  // 170: bragi.CsgoTeamScoreBoard.team:type_name -> bragi.Team
	1,   // 171: bragi.CsgoTeamScoreBoard.side:type_name -> bragi.CsgoSide
	62,  // 172: bragi.CsgoTeamScoreBoard.players:type_name -> bragi.CsgoPlayerScoreBoard
	70,  // 173: bragi.CsgoPlayerScoreBoard.player:type_name -> bragi.Player
	63,  // 174: bragi.CsgoPlayerScoreBoard.opening_duels:type_name -> bragi.CsgoOpeningDuels
	67,  // 175: bragi.CsgoEvents.team:type_name -> bragi.Team
	75,  // 176: bragi.Tournament.start_timestamp:type_name -> google.protobuf.Timestamp
	75,  // 177: bragi.Tournament.end_timestamp:type_name -> google.protobuf.Timestamp
	75,  // 178: bragi.Match.planned_start_timestamp:type_name -> google.protobuf.Timestamp
	75,  // 179: bragi.Match.start_timestamp:type_name -> google.protobuf.Timestamp
	75,  // 180: bragi.Match.end_timestamp:type_name -> google.protobuf.Timestamp
	66,  // 181: bragi.Match.tournament:type_name -> bragi.Tournament
	67,  // 182: bragi.Match.home_team:type_name -> bragi.Team
	67,  // 183: bragi.Match.away_team:type_name -> bragi.Team
	67,  // 184: bragi.Match.win_team:type_name -> bragi.Team
	4,   // 185: bragi.Match.best_of_type:type_name -> bragi.BestOfType
	69,  // 186: bragi.Match.maps:type_name -> bragi.Map
	75,  // 187: bragi.Map.start_timestamp:type_name -> google.protobuf.Timestamp
	75,  // 188: bragi.Map.end_timestamp:type_name -> google.protobuf.Timestamp
	67,  // 189: bragi.TournamentTeamStatisticsValue.team:type_name -> bragi.Team
	67,  // 190: bragi.TournamentTeamStatisticsValueInPercent.team:type_name -> bragi.Team
	5,   // 191: bragi.BragiGrpc.Sports:input_type -> bragi.SportsRequest
	8,   // 192: bragi.BragiGrpc.Tournaments:input_type -> bragi.TournamentsRequest
	9,   // 193: bragi.BragiGrpc.TournamentInfo:input_type -> bragi.TournamentInfoRequest
	6,   // 194: bragi.BragiGrpc.TeamHistoricalStatistics:input_type -> bragi.TeamHistoricalStatisticsRequest
	7,   // 195: bragi.BragiGrpc.LastFiveEncounters:input_type -> bragi.LastFiveEncountersRequest
	10,  // 196: bragi.BragiGrpc.PostMapStatistics:input_type -> bragi.PostMapStatisticsRequest
	11,  // 197: bragi.BragiGrpc.TournamentStatistics:input_type -> bragi.TournamentStatisticsRequest
	12,  // 198: bragi.BragiGrpc.TeamTournamentStatistics:input_type -> bragi.TeamTournamentStatisticsRequest
	13,  // 199: bragi.BragiGrpc.PlayerStatisticsAccordingRole:input_type -> bragi.PlayerStatisticsAccordingRoleRequest
	14,  // 200: bragi.BragiGrpc.Csgo2dMaFeed:input_type -> bragi.Csgo2dMaFeedRequest
	15,  // 201: bragi.BragiGrpc.CsgoScoreBoardFeed:input_type -> bragi.CsgoScoreBoardFeedRequest
	16,  // 202: bragi.BragiGrpc.CsgoEventsFeed:input_type -> bragi.CsgoEventsFeedRequest
	17,  // 203: bragi.BragiGrpc.Sports:output_type -> bragi.SportsResponse
	18,  // 204: bragi.BragiGrpc.Tournaments:output_type -> bragi.TournamentResponse
	22,  // 205: bragi.BragiGrpc.TournamentInfo:output_type -> bragi.TournamentInfoResponse
	19,  // 206: bragi.BragiGrpc.TeamHistoricalStatistics:output_type -> bragi.HistoricalStatisticsResponse
	20,  // 207: bragi.BragiGrpc.LastFiveEncounters:output_type -> bragi.LastFiveEncountersResponse
	21,  // 208: bragi.BragiGrpc.PostMapStatistics:output_type -> bragi.PostMapStatisticsResponse
	23,  // 209: bragi.BragiGrpc.TournamentStatistics:output_type -> bragi.TournamentStatisticsResponse
	24,  // 210: bragi.BragiGrpc.TeamTournamentStatistics:output_type -> bragi.TeamTournamentStatisticsResponse
	25,  // 211: bragi.BragiGrpc.PlayerStatisticsAccordingRole:output_type -> bragi.PlayerStatisticsAccordingRoleResponse
	55,  // 212: bragi.BragiGrpc.Csgo2dMaFeed:output_type -> bragi.Csgo2dMap
	60,  // 213: bragi.BragiGrpc.CsgoScoreBoardFeed:output_type -> bragi.CsgoScoreBoard
	64,  // 214: bragi.BragiGrpc.CsgoEventsFeed:output_type -> bragi.CsgoEvents
	203, // [203:215] is the sub-list for method output_type
	191, // [191:203] is the sub-list for method input_type
	191, // [191:191] is the sub-list for extension type_name
	191, // [191:191] is the sub-list for extension extendee
	0,   // [0:191] is the sub-list for field type_name
}

func init() { file_proto_bragi_bragi_proto_init() }
func file_proto_bragi_bragi_proto_init() {
	if File_proto_bragi_bragi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_bragi_bragi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamHistoricalStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastFiveEncountersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostMapStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamTournamentStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStatisticsAccordingRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Csgo2DMaFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoScoreBoardFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoEventsFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastFiveEncountersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostMapStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamTournamentStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStatisticsAccordingRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTeamStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPostMapStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTournamentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTournamentStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTeamPostMapStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerPostMapStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoRoundPostmap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoMapStatisticsAccordingSide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTournamentMapStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTournamentPlayerStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTournamentBestTeamStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTournamentBestPlayerStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTeamStandingRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayersDuel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoStatisticsSideValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoWeaponStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoWeaponPostMapStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoMapVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoMapStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoWeapon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTournamentBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTournamentStandingsBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTournamentBracketsBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTeamStanding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentBracketNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Csgo2DMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Csgo2DMapPlayerPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Csgo2DMapBombPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Map2DPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoScoreBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoTeamScoreBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoPlayerScoreBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoOpeningDuels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsgoEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tournament); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentTeamStatisticsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentTeamStatisticsValueInPercent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostMapStatisticsValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bragi_bragi_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_bragi_bragi_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_proto_bragi_bragi_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*HistoricalStatisticsResponse_Csgo)(nil),
	}
	file_proto_bragi_bragi_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*PostMapStatisticsResponse_Csgo)(nil),
	}
	file_proto_bragi_bragi_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*TournamentInfoResponse_Csgo)(nil),
	}
	file_proto_bragi_bragi_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*TournamentStatisticsResponse_Csgo)(nil),
	}
	file_proto_bragi_bragi_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*TeamTournamentStatisticsResponse_Csgo)(nil),
	}
	file_proto_bragi_bragi_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*PlayerStatisticsAccordingRoleResponse_Csgo)(nil),
	}
	file_proto_bragi_bragi_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_proto_bragi_bragi_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_proto_bragi_bragi_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_proto_bragi_bragi_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_proto_bragi_bragi_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_proto_bragi_bragi_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_proto_bragi_bragi_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_proto_bragi_bragi_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_proto_bragi_bragi_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*CsgoTournamentBlock_CsgoTournamentStandingsBlock)(nil),
		(*CsgoTournamentBlock_CsgoTournamentBracketsBlock)(nil),
	}
	file_proto_bragi_bragi_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_proto_bragi_bragi_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_proto_bragi_bragi_proto_msgTypes[55].OneofWrappers = []interface{}{}
	file_proto_bragi_bragi_proto_msgTypes[62].OneofWrappers = []interface{}{}
	file_proto_bragi_bragi_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_proto_bragi_bragi_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_proto_bragi_bragi_proto_msgTypes[65].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_bragi_bragi_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   70,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_bragi_bragi_proto_goTypes,
		DependencyIndexes: file_proto_bragi_bragi_proto_depIdxs,
		EnumInfos:         file_proto_bragi_bragi_proto_enumTypes,
		MessageInfos:      file_proto_bragi_bragi_proto_msgTypes,
	}.Build()
	File_proto_bragi_bragi_proto = out.File
	file_proto_bragi_bragi_proto_rawDesc = nil
	file_proto_bragi_bragi_proto_goTypes = nil
	file_proto_bragi_bragi_proto_depIdxs = nil
}
