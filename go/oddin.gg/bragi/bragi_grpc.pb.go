// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bragi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BragiGrpcClient is the client API for BragiGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BragiGrpcClient interface {
	Sports(ctx context.Context, in *SportsRequest, opts ...grpc.CallOption) (*SportsResponse, error)
	Tournaments(ctx context.Context, in *TournamentsRequest, opts ...grpc.CallOption) (*TournamentResponse, error)
	TournamentInfo(ctx context.Context, in *TournamentInfoRequest, opts ...grpc.CallOption) (*TournamentInfoResponse, error)
	TeamHistoricalStatistics(ctx context.Context, in *TeamHistoricalStatisticsRequest, opts ...grpc.CallOption) (*HistoricalStatisticsResponse, error)
	LastFiveEncounters(ctx context.Context, in *LastFiveEncountersRequest, opts ...grpc.CallOption) (*LastFiveEncountersResponse, error)
	PostMapStatistics(ctx context.Context, in *PostMapStatisticsRequest, opts ...grpc.CallOption) (*PostMapStatisticsResponse, error)
	TournamentStatistics(ctx context.Context, in *TournamentStatisticsRequest, opts ...grpc.CallOption) (*TournamentStatisticsResponse, error)
	TeamTournamentStatistics(ctx context.Context, in *TeamTournamentStatisticsRequest, opts ...grpc.CallOption) (*TeamTournamentStatisticsResponse, error)
	PlayerStatisticsAccordingRole(ctx context.Context, in *PlayerStatisticsAccordingRoleRequest, opts ...grpc.CallOption) (*PlayerStatisticsAccordingRoleResponse, error)
}

type bragiGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewBragiGrpcClient(cc grpc.ClientConnInterface) BragiGrpcClient {
	return &bragiGrpcClient{cc}
}

func (c *bragiGrpcClient) Sports(ctx context.Context, in *SportsRequest, opts ...grpc.CallOption) (*SportsResponse, error) {
	out := new(SportsResponse)
	err := c.cc.Invoke(ctx, "/bragi.BragiGrpc/Sports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiGrpcClient) Tournaments(ctx context.Context, in *TournamentsRequest, opts ...grpc.CallOption) (*TournamentResponse, error) {
	out := new(TournamentResponse)
	err := c.cc.Invoke(ctx, "/bragi.BragiGrpc/Tournaments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiGrpcClient) TournamentInfo(ctx context.Context, in *TournamentInfoRequest, opts ...grpc.CallOption) (*TournamentInfoResponse, error) {
	out := new(TournamentInfoResponse)
	err := c.cc.Invoke(ctx, "/bragi.BragiGrpc/TournamentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiGrpcClient) TeamHistoricalStatistics(ctx context.Context, in *TeamHistoricalStatisticsRequest, opts ...grpc.CallOption) (*HistoricalStatisticsResponse, error) {
	out := new(HistoricalStatisticsResponse)
	err := c.cc.Invoke(ctx, "/bragi.BragiGrpc/TeamHistoricalStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiGrpcClient) LastFiveEncounters(ctx context.Context, in *LastFiveEncountersRequest, opts ...grpc.CallOption) (*LastFiveEncountersResponse, error) {
	out := new(LastFiveEncountersResponse)
	err := c.cc.Invoke(ctx, "/bragi.BragiGrpc/LastFiveEncounters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiGrpcClient) PostMapStatistics(ctx context.Context, in *PostMapStatisticsRequest, opts ...grpc.CallOption) (*PostMapStatisticsResponse, error) {
	out := new(PostMapStatisticsResponse)
	err := c.cc.Invoke(ctx, "/bragi.BragiGrpc/PostMapStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiGrpcClient) TournamentStatistics(ctx context.Context, in *TournamentStatisticsRequest, opts ...grpc.CallOption) (*TournamentStatisticsResponse, error) {
	out := new(TournamentStatisticsResponse)
	err := c.cc.Invoke(ctx, "/bragi.BragiGrpc/TournamentStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiGrpcClient) TeamTournamentStatistics(ctx context.Context, in *TeamTournamentStatisticsRequest, opts ...grpc.CallOption) (*TeamTournamentStatisticsResponse, error) {
	out := new(TeamTournamentStatisticsResponse)
	err := c.cc.Invoke(ctx, "/bragi.BragiGrpc/TeamTournamentStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bragiGrpcClient) PlayerStatisticsAccordingRole(ctx context.Context, in *PlayerStatisticsAccordingRoleRequest, opts ...grpc.CallOption) (*PlayerStatisticsAccordingRoleResponse, error) {
	out := new(PlayerStatisticsAccordingRoleResponse)
	err := c.cc.Invoke(ctx, "/bragi.BragiGrpc/PlayerStatisticsAccordingRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BragiGrpcServer is the server API for BragiGrpc service.
// All implementations must embed UnimplementedBragiGrpcServer
// for forward compatibility
type BragiGrpcServer interface {
	Sports(context.Context, *SportsRequest) (*SportsResponse, error)
	Tournaments(context.Context, *TournamentsRequest) (*TournamentResponse, error)
	TournamentInfo(context.Context, *TournamentInfoRequest) (*TournamentInfoResponse, error)
	TeamHistoricalStatistics(context.Context, *TeamHistoricalStatisticsRequest) (*HistoricalStatisticsResponse, error)
	LastFiveEncounters(context.Context, *LastFiveEncountersRequest) (*LastFiveEncountersResponse, error)
	PostMapStatistics(context.Context, *PostMapStatisticsRequest) (*PostMapStatisticsResponse, error)
	TournamentStatistics(context.Context, *TournamentStatisticsRequest) (*TournamentStatisticsResponse, error)
	TeamTournamentStatistics(context.Context, *TeamTournamentStatisticsRequest) (*TeamTournamentStatisticsResponse, error)
	PlayerStatisticsAccordingRole(context.Context, *PlayerStatisticsAccordingRoleRequest) (*PlayerStatisticsAccordingRoleResponse, error)
	mustEmbedUnimplementedBragiGrpcServer()
}

// UnimplementedBragiGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedBragiGrpcServer struct {
}

func (UnimplementedBragiGrpcServer) Sports(context.Context, *SportsRequest) (*SportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sports not implemented")
}
func (UnimplementedBragiGrpcServer) Tournaments(context.Context, *TournamentsRequest) (*TournamentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tournaments not implemented")
}
func (UnimplementedBragiGrpcServer) TournamentInfo(context.Context, *TournamentInfoRequest) (*TournamentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TournamentInfo not implemented")
}
func (UnimplementedBragiGrpcServer) TeamHistoricalStatistics(context.Context, *TeamHistoricalStatisticsRequest) (*HistoricalStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamHistoricalStatistics not implemented")
}
func (UnimplementedBragiGrpcServer) LastFiveEncounters(context.Context, *LastFiveEncountersRequest) (*LastFiveEncountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastFiveEncounters not implemented")
}
func (UnimplementedBragiGrpcServer) PostMapStatistics(context.Context, *PostMapStatisticsRequest) (*PostMapStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMapStatistics not implemented")
}
func (UnimplementedBragiGrpcServer) TournamentStatistics(context.Context, *TournamentStatisticsRequest) (*TournamentStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TournamentStatistics not implemented")
}
func (UnimplementedBragiGrpcServer) TeamTournamentStatistics(context.Context, *TeamTournamentStatisticsRequest) (*TeamTournamentStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeamTournamentStatistics not implemented")
}
func (UnimplementedBragiGrpcServer) PlayerStatisticsAccordingRole(context.Context, *PlayerStatisticsAccordingRoleRequest) (*PlayerStatisticsAccordingRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerStatisticsAccordingRole not implemented")
}
func (UnimplementedBragiGrpcServer) mustEmbedUnimplementedBragiGrpcServer() {}

// UnsafeBragiGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BragiGrpcServer will
// result in compilation errors.
type UnsafeBragiGrpcServer interface {
	mustEmbedUnimplementedBragiGrpcServer()
}

func RegisterBragiGrpcServer(s grpc.ServiceRegistrar, srv BragiGrpcServer) {
	s.RegisterService(&BragiGrpc_ServiceDesc, srv)
}

func _BragiGrpc_Sports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiGrpcServer).Sports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.BragiGrpc/Sports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiGrpcServer).Sports(ctx, req.(*SportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BragiGrpc_Tournaments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TournamentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiGrpcServer).Tournaments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.BragiGrpc/Tournaments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiGrpcServer).Tournaments(ctx, req.(*TournamentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BragiGrpc_TournamentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TournamentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiGrpcServer).TournamentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.BragiGrpc/TournamentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiGrpcServer).TournamentInfo(ctx, req.(*TournamentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BragiGrpc_TeamHistoricalStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamHistoricalStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiGrpcServer).TeamHistoricalStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.BragiGrpc/TeamHistoricalStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiGrpcServer).TeamHistoricalStatistics(ctx, req.(*TeamHistoricalStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BragiGrpc_LastFiveEncounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastFiveEncountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiGrpcServer).LastFiveEncounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.BragiGrpc/LastFiveEncounters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiGrpcServer).LastFiveEncounters(ctx, req.(*LastFiveEncountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BragiGrpc_PostMapStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMapStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiGrpcServer).PostMapStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.BragiGrpc/PostMapStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiGrpcServer).PostMapStatistics(ctx, req.(*PostMapStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BragiGrpc_TournamentStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TournamentStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiGrpcServer).TournamentStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.BragiGrpc/TournamentStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiGrpcServer).TournamentStatistics(ctx, req.(*TournamentStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BragiGrpc_TeamTournamentStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamTournamentStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiGrpcServer).TeamTournamentStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.BragiGrpc/TeamTournamentStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiGrpcServer).TeamTournamentStatistics(ctx, req.(*TeamTournamentStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BragiGrpc_PlayerStatisticsAccordingRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerStatisticsAccordingRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BragiGrpcServer).PlayerStatisticsAccordingRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bragi.BragiGrpc/PlayerStatisticsAccordingRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BragiGrpcServer).PlayerStatisticsAccordingRole(ctx, req.(*PlayerStatisticsAccordingRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BragiGrpc_ServiceDesc is the grpc.ServiceDesc for BragiGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BragiGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bragi.BragiGrpc",
	HandlerType: (*BragiGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sports",
			Handler:    _BragiGrpc_Sports_Handler,
		},
		{
			MethodName: "Tournaments",
			Handler:    _BragiGrpc_Tournaments_Handler,
		},
		{
			MethodName: "TournamentInfo",
			Handler:    _BragiGrpc_TournamentInfo_Handler,
		},
		{
			MethodName: "TeamHistoricalStatistics",
			Handler:    _BragiGrpc_TeamHistoricalStatistics_Handler,
		},
		{
			MethodName: "LastFiveEncounters",
			Handler:    _BragiGrpc_LastFiveEncounters_Handler,
		},
		{
			MethodName: "PostMapStatistics",
			Handler:    _BragiGrpc_PostMapStatistics_Handler,
		},
		{
			MethodName: "TournamentStatistics",
			Handler:    _BragiGrpc_TournamentStatistics_Handler,
		},
		{
			MethodName: "TeamTournamentStatistics",
			Handler:    _BragiGrpc_TeamTournamentStatistics_Handler,
		},
		{
			MethodName: "PlayerStatisticsAccordingRole",
			Handler:    _BragiGrpc_PlayerStatisticsAccordingRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bragi/bragi.proto",
}
