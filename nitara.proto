syntax = "proto3";

option go_package = "nitara_api/nitara-grpc;nitara_grpc";

package grpcmodel;

import "google/protobuf/timestamp.proto";


// The greeting service definition.
service NitaraGrpc {

  rpc Sports (SportsRequest) returns (SportsResponse) {}

  rpc Tournaments(TournamentsRequest) returns(TournamentResponse) {}

  rpc TournamentInfo(TournamentInfoRequest) returns (TournamentInfoResponse) {}

  rpc TeamHistoricalStatistics (TeamHistoricalStatisticsRequest) returns (HistoricalStatisticsResponse) {}

  rpc LastFiveEncounters (LastFiveEncountersRequest) returns (LastFiveEncountersResponse) {}

  rpc PostMapStatistics(PostMapStatisticsRequest) returns (PostMapStatisticsResponse) {}

  rpc TournamentStatistics(TournamentStatisticsRequest) returns (TournamentStatisticsResponse) {}

  rpc TeamTournamentStatistics(TeamTournamentStatisticsRequest) returns (TeamTournamentStatisticsResponse) {}

  rpc PlayerStatisticsAccordingRole(PlayerStatisticsAccordingRoleRequest) returns (PlayerStatisticsAccordingRoleResponse) {}

}

// ----------------------------------------------------------------------------------------------------------------------
// Request/response --------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------

// The request message containing the user's name.
message SportsRequest {
}

message TeamHistoricalStatisticsRequest {
  uint32 sportID = 1;
  //  # Timeframe represents interval of computed statistics since current date. Eg. when current date is
  //  # 2021/08/31 and "timeframe" is THREE_MONTHS, then statistics interval would be 2021/06/01 - 2021/08/31.
  Timeframe timeframe = 2;
  uint32 teamID = 3;
}

message LastFiveEncountersRequest {
  uint32 sportID = 1;
  Timeframe timeframe = 2;
  uint32 homeTeamID = 3;
  uint32 awayTeamID = 4;
}

message TournamentsRequest {
  uint32 sportID = 1;
  optional google.protobuf.Timestamp dateFrom = 2;
  optional google.protobuf.Timestamp dateTo = 3;
}

message TournamentInfoRequest {
  uint32 tournamentID = 1;
}

message PostMapStatisticsRequest {
  uint32 mapID = 1;
}

message TournamentStatisticsRequest {
  uint32 tournamentID = 1;
}

message TeamTournamentStatisticsRequest {
  uint32 tournamentID = 1;
  uint32 teamID = 2;
}

message  PlayerStatisticsAccordingRoleRequest {
  uint32 sportID = 1;
  //    # Timeframe represents interval of computed statistics since current date. Eg. when current date is
  //    # 2021/08/31 and "timeframe" is THREE_MONTHS, then statistics interval would be 2021/06/01 - 2021/08/31.
  Timeframe timeframe = 2;
  string role = 3;
  uint32 teamID = 4;
}

// The response message containing the greetings
message SportsResponse {
  repeated Sport sports = 1;
}

message TournamentResponse {
  repeated Tournament tournaments = 1;
}

message HistoricalStatisticsResponse {
  oneof oneof_name {
    CsgoTeamStatistics csgoTeamStatistics = 1;
  }
}
message LastFiveEncountersResponse {
  repeated Match matches = 1;
}

message PostMapStatisticsResponse {
  oneof oneof_name {
    CsgoPostMapStatistics csgoPostMapStatistics = 1;
  }
}

message TournamentInfoResponse {
  oneof oneof_name {
    CsgoTournamentInfo csgoTournamentInfo = 1;
  }
}

message TournamentStatisticsResponse {
  oneof oneof_name {
    CsgoTournamentStatistics csgoTournamentStatistics = 1;
  }
}

message TeamTournamentStatisticsResponse {
  oneof oneof_name {
    CsgoTeamStatistics csgoTeamsTournamentStatistics = 1;
  }
}

message PlayerStatisticsAccordingRoleResponse {
  oneof oneof_name {
    CsgoPlayerStatistics csgoPlayerStatistics = 1;
  }
}

// ----------------------------------------------------------------------------------------------------------------------
// Csgo entities --------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------

message CsgoTeamStatistics {
  Team team = 2;
  repeated CsgoPlayerStatistics playerStatistics = 3;
  CsgoMapVote mapVote = 4;
  repeated CsgoMapStatistics  mapWinrate = 5;
  repeated CsgoMapStatisticsAccordingSide   roundWinrate = 6;
  StatisticsValues   overallMapWinrate = 7;
  CsgoStatisticsSideValues   overallRoundWinrate = 8;
  CsgoStatisticsSideValues pistolWinrate = 9;
  CsgoStatisticsSideValues  pistolWinConversion = 10;
  CsgoStatisticsSideValues   pistolLossConversion = 11;
  CsgoStatisticsSideValues  kills = 12;
  CsgoStatisticsSideValues  deaths = 13;
  CsgoStatisticsSideValues killsOverDeaths = 14;
  CsgoStatisticsSideValues assists = 15;
  CsgoStatisticsSideValues flashAssists = 16;
  CsgoStatisticsSideValues damage = 17;
  CsgoStatisticsSideValues headshotRate = 18;
  CsgoStatisticsSideValues openingKills = 19;
  CsgoStatisticsSideValues openingConversion = 20;
  CsgoStatisticsSideValues openingDeathConversion = 21;
  CsgoStatisticsSideValues awpKills = 22;
  CsgoStatisticsSideValues eliminationWinrate = 23;
  CsgoStatisticsSideValues objectiveWinrate = 24;
  CsgoStatisticsSideValues utilityDamage = 25;
  CsgoStatisticsSideValues firstToWin3Rounds = 26;
  CsgoStatisticsSideValues firstToWin6Rounds = 27;
  CsgoStatisticsSideValues firstToWin9Rounds = 28;
  CsgoStatisticsSideValues firstToWin12Rounds = 29;
  CsgoStatisticsSideValues roundsLost = 30;
  repeated CsgoWeaponStatistics favouriteWeapons = 31;
  repeated Match  form = 32;
}

message CsgoPlayerStatistics {
  Player player = 1;
  StatisticsValues kills = 2;
  StatisticsValues deaths = 3;
  StatisticsValues assists = 4;
  StatisticsValues killsOverDeaths = 5;
  StatisticsValues damage = 6;
  StatisticsValues headshotRate = 7;
  StatisticsValues flashAssists = 8;
  StatisticsValues openingKills = 9;
  StatisticsValues awpKills = 10;
  StatisticsValues utilityDamage = 11;
  StatisticsValues enemiesFlashed = 12;
  StatisticsValues multiKillRounds = 13;
  StatisticsValues clutchRounds = 14;
  StatisticsValues lurkKills = 15;
  StatisticsValues grenadesUsed = 16;
  repeated CsgoWeaponStatistics favouriteWeapons = 17;
}

message CsgoPostMapStatistics {
  CsgoMap map = 1;
  CsgoTeamPostMapStatistics homeTeamStatistics = 2;
  CsgoTeamPostMapStatistics awayTeamStatistics = 3;
  repeated CsgoPlayersDuel duels = 4;
  repeated CsgoRoundPostmap rounds = 5;
}

message CsgoTournamentInfo {
  uint32 ID = 1;
  Tournament tournament = 2;
  optional string organizer = 3;
  optional string  location = 4;
  optional string  prizePool = 5;
  optional bool  isOffline = 6;
  optional bool  isQualification = 7;
  repeated CsgoTeam teams = 8;
  repeated Match matches = 9;
  repeated CsgoTournamentBlock blocks = 10;
}

message CsgoTournamentStatistics {
  uint32 ID = 1;
  Tournament tournament = 2;
  optional float terroristsWinrateInPercent = 3;
  optional  float counterTerroristsWinrateInPercent = 4;
  CsgoTournamentBestTeamStatistics bestTeams = 5;
  CsgoTournamentBestPlayerStatistics bestPlayers = 6;
  repeated CsgoTournamentMapStatistics tournamentMapsStatistics = 7;
}

message CsgoTeamPostMapStatistics {
  uint32 ID = 1;
  Team team = 2;
  repeated CsgoPlayerPostMapStatistics playersStatistics = 3;
  int32 roundsWon = 4;
  int32 roundsLost = 5;
  PostMapStatisticsValues kills = 6;
  PostMapStatisticsValues deaths = 7;
  PostMapStatisticsValues assists = 8;
  PostMapStatisticsValues killsOverDeaths = 9;
  PostMapStatisticsValues damage = 10;
  PostMapStatisticsValues headshotRate = 11;
  PostMapStatisticsValues flashAssists = 12;
  PostMapStatisticsValues openingKills = 13;
  PostMapStatisticsValues killsDifference = 14;
  PostMapStatisticsValues killCost = 15;
  PostMapStatisticsValues accuracyRate = 16;
  PostMapStatisticsValues killsWithDroppedWeapons = 17;
  repeated CsgoWeaponPostMapStatistics favouriteWeapons = 18;
}

message CsgoPlayerPostMapStatistics {
  uint32 ID = 1;
  Player player = 2;
  CsgoPlayerRole playerMapRole = 3;
  PostMapStatisticsValues kills = 4;
  PostMapStatisticsValues deaths = 5;
  PostMapStatisticsValues assists = 6;
  PostMapStatisticsValues roundsSurvived = 7;
  PostMapStatisticsValues killsOverDeaths = 8;
  PostMapStatisticsValues damage = 9;
  PostMapStatisticsValues headshotRate = 10;
  PostMapStatisticsValues flashAssists = 11;
  PostMapStatisticsValues openingKills = 12;
  PostMapStatisticsValues clutchRounds = 13;
  PostMapStatisticsValues utilityDamage = 14;
  PostMapStatisticsValues grenadesUsed = 15;
  PostMapStatisticsValues enemiesFlashed = 16;
  PostMapStatisticsValues awpKills = 17;
  PostMapStatisticsValues lurkKills = 18;
  PostMapStatisticsValues killsDifference = 19;
  PostMapStatisticsValues killCost = 20;
  PostMapStatisticsValues accuracyRate = 21;
  repeated CsgoWeaponPostMapStatistics favouriteWeapons = 22;
}

// ----------------------------------------------------------------------------------------------------------------------
// Csgo statistics entities ---------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------

message CsgoRoundPostmap{
  int32 round = 1;
  Map map = 2;
  CsgoMap csgoMap = 3;
  Team winnerTeam = 4;
  CsgoSide winnerSide = 5;
  CsgoRoundOutcome roundOutcome = 6;
}

message CsgoMapStatisticsAccordingSide {
  CsgoMap map = 1;
  CsgoStatisticsSideValues statistics = 2;
}

message CsgoTournamentMapStatistics {
  CsgoMap map = 1;
  int32 picks = 2;
  int32 bans = 3;
  optional float terroristsWinrateInPercent = 4;
  optional float counterTerroristsWinrateInPercent = 5;
  CsgoTournamentBestTeamStatistics bestTeams = 6;
  CsgoTournamentBestPlayerStatistics   bestPlayers = 7;
}

message CsgoTournamentPlayerStatistics {
  Player player = 1;
  optional Team team = 2;
  float value = 3;
}

message CsgoTournamentBestTeamStatistics {
  TournamentTeamStatisticsValue highestKills = 1;
  TournamentTeamStatisticsValue highestKillsOverDeaths = 2;
  TournamentTeamStatisticsValue highestAwpKills = 3;
  TournamentTeamStatisticsValueInPercent highestPlantRate = 4;
  TournamentTeamStatisticsValueInPercent highestDefuseRate = 5;
}

message CsgoTournamentBestPlayerStatistics {
  CsgoTournamentPlayerStatistics highestKills = 1;
  CsgoTournamentPlayerStatistics  highestKillsOverDeaths = 2;
  CsgoTournamentPlayerStatistics highestDamage = 3;
  CsgoTournamentPlayerStatistics highestFlashAssists = 4;
  CsgoTournamentPlayerStatistics highestUtilityDamage = 5;
  CsgoTournamentPlayerStatistics highestOpeningKills = 6;
}

message CsgoTeamStandingRound {
  int32 round = 1;
  optional int32 teamScore = 2;
  optional Team opponent = 3;
  optional int32 opponentScore = 4;
  bool matchIsClosed = 5;
}

message CsgoPlayersDuel {
  CsgoPlayer homePlayer = 1;
  int32 homePlayerKills = 2;
  CsgoPlayer awayPlayer = 3;
  int32 awayPlayerKills = 4;
}

message CsgoStatisticsSideValues {
  StatisticsValues terrorists = 1;
  StatisticsValues counterTerrorists = 2;
  StatisticsValues all = 3;
}

message CsgoWeaponStatistics {
  CsgoWeapon weapon = 1;
  StatisticsValues killsWithWeapon = 2;
  StatisticsValues headshotsWithWeapon = 3;
}

message CsgoWeaponPostMapStatistics {
  CsgoWeapon weapon = 1;
  int32 killsWithWeapon = 2;
  int32 headshotsWithWeapon = 3;
}

message CsgoMap {
  uint32 ID = 1;
  string name = 2;
  optional string iconPath = 3;
}

message CsgoMapVote {
  repeated CsgoMapStatistics picked = 1;
  repeated CsgoMapStatistics banned = 2;
}

message CsgoMapStatistics {
  CsgoMap map = 1;
  StatisticsValues statistics = 2;
}

message CsgoWeapon {
  uint32 ID = 1;
  string name = 2;
  optional string iconPath = 3;
}

message CsgoTeam {
  uint32 ID = 1;
  Team team = 2;
  repeated Player players = 3;
}

message CsgoPlayer {
  uint32 ID = 1;
  string nickname = 2;
  optional string realName = 3;
  optional string shortcut = 4;
  optional string iconPath = 5;
  CsgoPlayerRole role = 6;
}

message CsgoTournamentBlock {
  oneof oneof_name {
    CsgoTournamentStandingsBlock csgoTournamentStandingsBlock = 1;
    CsgoTournamentBracketsBlock csgoTournamentBracketsBlock = 2;
  }
}

message CsgoTournamentStandingsBlock {
  uint32 ID = 1;
  string name = 2;
  int32 order = 3;
  repeated CsgoTeamStanding  standings = 4;
}

message CsgoTournamentBracketsBlock {
  uint32 ID = 1;
  string name = 2;
  int32 order = 3;
  repeated TournamentBracketNode brackets = 4;
}

message CsgoTeamStanding {
  uint32 ID = 1;
  int32 rank = 2;
  Team team = 3;
  int32 points = 4;
  int32 matchesWon = 5;
  int32 matchesLost = 6;
  int32 matchesDrawn = 7;
  int32 mapsWon = 8;
  int32 mapsLost = 9;
  int32 mapsDrawn = 10;
  int32 roundsWon = 11;
  int32 roundsLost = 12;
  int32 mapDifference = 13;
  int32 roundDifference = 14;
  optional string status = 15;
  repeated CsgoTeamStandingRound rounds = 16;
}

message TournamentBracketNode {
  uint32 ID = 1;
  optional Team homeTeam = 2;
  optional int32 homeScore = 3;
  optional Team awayTeam = 4;
  optional int32 awayScore = 5;
  optional Match match = 6;
  optional string label = 7;
  bool isRoot = 8;
  repeated uint32 childNodes = 9;
}

enum CsgoPlayerRole {
  KILL_LEADER = 0;
  ENTRY_FRAGGER = 1;
  SUPPORT = 2;
  AWPER = 3;
  LURKER = 4;
  UNDEFINED = 5;
}

enum CsgoSide {
  COUNTER_TERRORISTS = 0;
  TERRORISTS = 1;
}

enum CsgoRoundOutcome {
  COUNTER_TERRORISTS_ELIMINATED = 0;
  TERRORISTS_ELIMINATED = 1;
  EXPLOSION = 2;
  DEFUSE = 3;
  TIMEOUT = 4;
}

// ----------------------------------------------------------------------------------------------------------------------
// common entities ------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------

message Sport {
  uint32 ID = 1;
  string name = 2;
}

message Tournament {
  uint32 ID = 1;
  string name = 2;
  google.protobuf.Timestamp startTimestamp = 3;
  google.protobuf.Timestamp endTimestamp = 4;
}

message Team {
  uint32 ID = 1;
  string name = 2;
  optional string iconPath = 3;
}

message Match {
  uint32 ID = 1;
  google.protobuf.Timestamp plannedStartTimestamp = 2;
  google.protobuf.Timestamp startTimestamp = 3;
  google.protobuf.Timestamp endTimestamp = 4;
  Tournament tournament = 5;
  optional Team homeTeam = 6;
  optional int32 homeScore = 7;
  optional Team awayTeam = 8;
  optional int32 awayScore = 9;
  optional Team winTeam = 10;
  bool isClosed = 11;
  BestOfType bestOfType = 12;
  repeated Map maps = 13;
}

message Map {
  uint32 ID = 1;
  int32 order = 2;
  optional google.protobuf.Timestamp startTimestamp = 3;
  optional google.protobuf.Timestamp endTimestamp = 4;
  bool isClosed = 5;
}

message Player {
  uint32 ID = 1;
  string nickname = 2;
  optional string realName = 3;
  optional string shortcut = 4;
  optional string iconPath = 5;
}

message TournamentTeamStatisticsValue {
  Team team = 1;
  float value = 2;
}

message TournamentTeamStatisticsValueInPercent {
  Team team = 1;
  float value = 2; //    # In value in percent
}

message PostMapStatisticsValues {
  float percentageOfMaximum = 1;
  float total = 2;
}

message StatisticsValues {
  float avg = 1;
  float percentile = 2;
  float total = 3;
}

enum Timeframe {
  ONE_MONTH = 0;
  THREE_MONTHS = 1;
  SIX_MONTHS = 2;
  ONE_YEAR = 3;
}

enum BestOfType {
  BO1 = 0;
  BO2 = 1;
  BO3 = 2;
  BO4 = 3;
  BO5 = 4;
  BO6 = 5;
  BO7 = 6;
  UNKNOWN = 7;
}
